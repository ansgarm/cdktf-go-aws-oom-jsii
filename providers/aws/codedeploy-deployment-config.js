"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodedeployDeploymentConfig = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function codedeployDeploymentConfigMinimumHealthyHostsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
function codedeployDeploymentConfigTrafficRoutingConfigTimeBasedCanaryToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval: cdktf.numberToTerraform(struct.interval),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
function codedeployDeploymentConfigTrafficRoutingConfigTimeBasedLinearToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval: cdktf.numberToTerraform(struct.interval),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
function codedeployDeploymentConfigTrafficRoutingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        time_based_canary: cdktf.listMapper(codedeployDeploymentConfigTrafficRoutingConfigTimeBasedCanaryToTerraform)(struct.timeBasedCanary),
        time_based_linear: cdktf.listMapper(codedeployDeploymentConfigTrafficRoutingConfigTimeBasedLinearToTerraform)(struct.timeBasedLinear),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/codedeploy_deployment_config.html aws_codedeploy_deployment_config}.
 */
class CodedeployDeploymentConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/codedeploy_deployment_config.html aws_codedeploy_deployment_config} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_codedeploy_deployment_config',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._computePlatform = config.computePlatform;
        this._deploymentConfigName = config.deploymentConfigName;
        this._minimumHealthyHosts = config.minimumHealthyHosts;
        this._trafficRoutingConfig = config.trafficRoutingConfig;
    }
    get computePlatform() {
        return this.getStringAttribute('compute_platform');
    }
    set computePlatform(value) {
        this._computePlatform = value;
    }
    resetComputePlatform() {
        this._computePlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get computePlatformInput() {
        return this._computePlatform;
    }
    // deployment_config_id - computed: true, optional: false, required: false
    get deploymentConfigId() {
        return this.getStringAttribute('deployment_config_id');
    }
    get deploymentConfigName() {
        return this.getStringAttribute('deployment_config_name');
    }
    set deploymentConfigName(value) {
        this._deploymentConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentConfigNameInput() {
        return this._deploymentConfigName;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get minimumHealthyHosts() {
        return this.interpolationForAttribute('minimum_healthy_hosts');
    }
    set minimumHealthyHosts(value) {
        this._minimumHealthyHosts = value;
    }
    resetMinimumHealthyHosts() {
        this._minimumHealthyHosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumHealthyHostsInput() {
        return this._minimumHealthyHosts;
    }
    get trafficRoutingConfig() {
        return this.interpolationForAttribute('traffic_routing_config');
    }
    set trafficRoutingConfig(value) {
        this._trafficRoutingConfig = value;
    }
    resetTrafficRoutingConfig() {
        this._trafficRoutingConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trafficRoutingConfigInput() {
        return this._trafficRoutingConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            compute_platform: cdktf.stringToTerraform(this._computePlatform),
            deployment_config_name: cdktf.stringToTerraform(this._deploymentConfigName),
            minimum_healthy_hosts: cdktf.listMapper(codedeployDeploymentConfigMinimumHealthyHostsToTerraform)(this._minimumHealthyHosts),
            traffic_routing_config: cdktf.listMapper(codedeployDeploymentConfigTrafficRoutingConfigToTerraform)(this._trafficRoutingConfig),
        };
    }
}
exports.CodedeployDeploymentConfig = CodedeployDeploymentConfig;
_a = JSII_RTTI_SYMBOL_1;
CodedeployDeploymentConfig[_a] = { fqn: "hashicorp_aws.CodedeployDeploymentConfig", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,