"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WafSqlInjectionMatchSet = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data: cdktf.stringToTerraform(struct.data),
        type: cdktf.stringToTerraform(struct.type),
    };
}
function wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        text_transformation: cdktf.stringToTerraform(struct.textTransformation),
        field_to_match: cdktf.listMapper(wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform)(struct.fieldToMatch),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/waf_sql_injection_match_set.html aws_waf_sql_injection_match_set}.
 */
class WafSqlInjectionMatchSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/waf_sql_injection_match_set.html aws_waf_sql_injection_match_set} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_waf_sql_injection_match_set',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._sqlInjectionMatchTuples = config.sqlInjectionMatchTuples;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sqlInjectionMatchTuples() {
        return this.interpolationForAttribute('sql_injection_match_tuples');
    }
    set sqlInjectionMatchTuples(value) {
        this._sqlInjectionMatchTuples = value;
    }
    resetSqlInjectionMatchTuples() {
        this._sqlInjectionMatchTuples = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlInjectionMatchTuplesInput() {
        return this._sqlInjectionMatchTuples;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            sql_injection_match_tuples: cdktf.listMapper(wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform)(this._sqlInjectionMatchTuples),
        };
    }
}
exports.WafSqlInjectionMatchSet = WafSqlInjectionMatchSet;
_a = JSII_RTTI_SYMBOL_1;
WafSqlInjectionMatchSet[_a] = { fqn: "hashicorp_aws.WafSqlInjectionMatchSet", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,