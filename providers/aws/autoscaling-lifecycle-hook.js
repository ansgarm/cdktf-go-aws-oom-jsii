"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscalingLifecycleHook = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/autoscaling_lifecycle_hook.html aws_autoscaling_lifecycle_hook}.
 */
class AutoscalingLifecycleHook extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/autoscaling_lifecycle_hook.html aws_autoscaling_lifecycle_hook} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_autoscaling_lifecycle_hook',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._autoscalingGroupName = config.autoscalingGroupName;
        this._defaultResult = config.defaultResult;
        this._heartbeatTimeout = config.heartbeatTimeout;
        this._lifecycleTransition = config.lifecycleTransition;
        this._name = config.name;
        this._notificationMetadata = config.notificationMetadata;
        this._notificationTargetArn = config.notificationTargetArn;
        this._roleArn = config.roleArn;
    }
    get autoscalingGroupName() {
        return this.getStringAttribute('autoscaling_group_name');
    }
    set autoscalingGroupName(value) {
        this._autoscalingGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingGroupNameInput() {
        return this._autoscalingGroupName;
    }
    get defaultResult() {
        return this.getStringAttribute('default_result');
    }
    set defaultResult(value) {
        this._defaultResult = value;
    }
    resetDefaultResult() {
        this._defaultResult = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResultInput() {
        return this._defaultResult;
    }
    get heartbeatTimeout() {
        return this.getNumberAttribute('heartbeat_timeout');
    }
    set heartbeatTimeout(value) {
        this._heartbeatTimeout = value;
    }
    resetHeartbeatTimeout() {
        this._heartbeatTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get heartbeatTimeoutInput() {
        return this._heartbeatTimeout;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get lifecycleTransition() {
        return this.getStringAttribute('lifecycle_transition');
    }
    set lifecycleTransition(value) {
        this._lifecycleTransition = value;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleTransitionInput() {
        return this._lifecycleTransition;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get notificationMetadata() {
        return this.getStringAttribute('notification_metadata');
    }
    set notificationMetadata(value) {
        this._notificationMetadata = value;
    }
    resetNotificationMetadata() {
        this._notificationMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationMetadataInput() {
        return this._notificationMetadata;
    }
    get notificationTargetArn() {
        return this.getStringAttribute('notification_target_arn');
    }
    set notificationTargetArn(value) {
        this._notificationTargetArn = value;
    }
    resetNotificationTargetArn() {
        this._notificationTargetArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationTargetArnInput() {
        return this._notificationTargetArn;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            autoscaling_group_name: cdktf.stringToTerraform(this._autoscalingGroupName),
            default_result: cdktf.stringToTerraform(this._defaultResult),
            heartbeat_timeout: cdktf.numberToTerraform(this._heartbeatTimeout),
            lifecycle_transition: cdktf.stringToTerraform(this._lifecycleTransition),
            name: cdktf.stringToTerraform(this._name),
            notification_metadata: cdktf.stringToTerraform(this._notificationMetadata),
            notification_target_arn: cdktf.stringToTerraform(this._notificationTargetArn),
            role_arn: cdktf.stringToTerraform(this._roleArn),
        };
    }
}
exports.AutoscalingLifecycleHook = AutoscalingLifecycleHook;
_a = JSII_RTTI_SYMBOL_1;
AutoscalingLifecycleHook[_a] = { fqn: "hashicorp_aws.AutoscalingLifecycleHook", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,