"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsGlueScript = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsGlueScriptDagEdgeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
        target: cdktf.stringToTerraform(struct.target),
        target_parameter: cdktf.stringToTerraform(struct.targetParameter),
    };
}
function dataAwsGlueScriptDagNodeArgsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        param: cdktf.booleanToTerraform(struct.param),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function dataAwsGlueScriptDagNodeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        line_number: cdktf.numberToTerraform(struct.lineNumber),
        node_type: cdktf.stringToTerraform(struct.nodeType),
        args: cdktf.listMapper(dataAwsGlueScriptDagNodeArgsToTerraform)(struct.args),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/glue_script.html aws_glue_script}.
 */
class DataAwsGlueScript extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/glue_script.html aws_glue_script} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_script',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._language = config.language;
        this._dagEdge = config.dagEdge;
        this._dagNode = config.dagNode;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get language() {
        return this.getStringAttribute('language');
    }
    set language(value) {
        this._language = value;
    }
    resetLanguage() {
        this._language = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageInput() {
        return this._language;
    }
    // python_script - computed: true, optional: false, required: false
    get pythonScript() {
        return this.getStringAttribute('python_script');
    }
    // scala_code - computed: true, optional: false, required: false
    get scalaCode() {
        return this.getStringAttribute('scala_code');
    }
    get dagEdge() {
        return this.interpolationForAttribute('dag_edge');
    }
    set dagEdge(value) {
        this._dagEdge = value;
    }
    // Temporarily expose input value. Use with caution.
    get dagEdgeInput() {
        return this._dagEdge;
    }
    get dagNode() {
        return this.interpolationForAttribute('dag_node');
    }
    set dagNode(value) {
        this._dagNode = value;
    }
    // Temporarily expose input value. Use with caution.
    get dagNodeInput() {
        return this._dagNode;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            language: cdktf.stringToTerraform(this._language),
            dag_edge: cdktf.listMapper(dataAwsGlueScriptDagEdgeToTerraform)(this._dagEdge),
            dag_node: cdktf.listMapper(dataAwsGlueScriptDagNodeToTerraform)(this._dagNode),
        };
    }
}
exports.DataAwsGlueScript = DataAwsGlueScript;
_a = JSII_RTTI_SYMBOL_1;
DataAwsGlueScript[_a] = { fqn: "hashicorp_aws.DataAwsGlueScript", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,