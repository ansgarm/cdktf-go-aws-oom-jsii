"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsyncResolver = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appsyncResolverCachingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        caching_keys: cdktf.listMapper(cdktf.stringToTerraform)(struct.cachingKeys),
        ttl: cdktf.numberToTerraform(struct.ttl),
    };
}
function appsyncResolverPipelineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        functions: cdktf.listMapper(cdktf.stringToTerraform)(struct.functions),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/appsync_resolver.html aws_appsync_resolver}.
 */
class AppsyncResolver extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appsync_resolver.html aws_appsync_resolver} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appsync_resolver',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._apiId = config.apiId;
        this._dataSource = config.dataSource;
        this._field = config.field;
        this._kind = config.kind;
        this._requestTemplate = config.requestTemplate;
        this._responseTemplate = config.responseTemplate;
        this._type = config.type;
        this._cachingConfig = config.cachingConfig;
        this._pipelineConfig = config.pipelineConfig;
    }
    get apiId() {
        return this.getStringAttribute('api_id');
    }
    set apiId(value) {
        this._apiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiIdInput() {
        return this._apiId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get dataSource() {
        return this.getStringAttribute('data_source');
    }
    set dataSource(value) {
        this._dataSource = value;
    }
    resetDataSource() {
        this._dataSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceInput() {
        return this._dataSource;
    }
    get field() {
        return this.getStringAttribute('field');
    }
    set field(value) {
        this._field = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldInput() {
        return this._field;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kind() {
        return this.getStringAttribute('kind');
    }
    set kind(value) {
        this._kind = value;
    }
    resetKind() {
        this._kind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kindInput() {
        return this._kind;
    }
    get requestTemplate() {
        return this.getStringAttribute('request_template');
    }
    set requestTemplate(value) {
        this._requestTemplate = value;
    }
    resetRequestTemplate() {
        this._requestTemplate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestTemplateInput() {
        return this._requestTemplate;
    }
    get responseTemplate() {
        return this.getStringAttribute('response_template');
    }
    set responseTemplate(value) {
        this._responseTemplate = value;
    }
    resetResponseTemplate() {
        this._responseTemplate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseTemplateInput() {
        return this._responseTemplate;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get cachingConfig() {
        return this.interpolationForAttribute('caching_config');
    }
    set cachingConfig(value) {
        this._cachingConfig = value;
    }
    resetCachingConfig() {
        this._cachingConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cachingConfigInput() {
        return this._cachingConfig;
    }
    get pipelineConfig() {
        return this.interpolationForAttribute('pipeline_config');
    }
    set pipelineConfig(value) {
        this._pipelineConfig = value;
    }
    resetPipelineConfig() {
        this._pipelineConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pipelineConfigInput() {
        return this._pipelineConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_id: cdktf.stringToTerraform(this._apiId),
            data_source: cdktf.stringToTerraform(this._dataSource),
            field: cdktf.stringToTerraform(this._field),
            kind: cdktf.stringToTerraform(this._kind),
            request_template: cdktf.stringToTerraform(this._requestTemplate),
            response_template: cdktf.stringToTerraform(this._responseTemplate),
            type: cdktf.stringToTerraform(this._type),
            caching_config: cdktf.listMapper(appsyncResolverCachingConfigToTerraform)(this._cachingConfig),
            pipeline_config: cdktf.listMapper(appsyncResolverPipelineConfigToTerraform)(this._pipelineConfig),
        };
    }
}
exports.AppsyncResolver = AppsyncResolver;
_a = JSII_RTTI_SYMBOL_1;
AppsyncResolver[_a] = { fqn: "hashicorp_aws.AppsyncResolver", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,