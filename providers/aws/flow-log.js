"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowLog = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/flow_log.html aws_flow_log}.
 */
class FlowLog extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/flow_log.html aws_flow_log} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_flow_log',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._eniId = config.eniId;
        this._iamRoleArn = config.iamRoleArn;
        this._logDestination = config.logDestination;
        this._logDestinationType = config.logDestinationType;
        this._logFormat = config.logFormat;
        this._logGroupName = config.logGroupName;
        this._maxAggregationInterval = config.maxAggregationInterval;
        this._subnetId = config.subnetId;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._trafficType = config.trafficType;
        this._vpcId = config.vpcId;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get eniId() {
        return this.getStringAttribute('eni_id');
    }
    set eniId(value) {
        this._eniId = value;
    }
    resetEniId() {
        this._eniId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eniIdInput() {
        return this._eniId;
    }
    get iamRoleArn() {
        return this.getStringAttribute('iam_role_arn');
    }
    set iamRoleArn(value) {
        this._iamRoleArn = value;
    }
    resetIamRoleArn() {
        this._iamRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iamRoleArnInput() {
        return this._iamRoleArn;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get logDestination() {
        return this.getStringAttribute('log_destination');
    }
    set logDestination(value) {
        this._logDestination = value;
    }
    resetLogDestination() {
        this._logDestination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationInput() {
        return this._logDestination;
    }
    get logDestinationType() {
        return this.getStringAttribute('log_destination_type');
    }
    set logDestinationType(value) {
        this._logDestinationType = value;
    }
    resetLogDestinationType() {
        this._logDestinationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationTypeInput() {
        return this._logDestinationType;
    }
    get logFormat() {
        return this.getStringAttribute('log_format');
    }
    set logFormat(value) {
        this._logFormat = value;
    }
    resetLogFormat() {
        this._logFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logFormatInput() {
        return this._logFormat;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get maxAggregationInterval() {
        return this.getNumberAttribute('max_aggregation_interval');
    }
    set maxAggregationInterval(value) {
        this._maxAggregationInterval = value;
    }
    resetMaxAggregationInterval() {
        this._maxAggregationInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAggregationIntervalInput() {
        return this._maxAggregationInterval;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get trafficType() {
        return this.getStringAttribute('traffic_type');
    }
    set trafficType(value) {
        this._trafficType = value;
    }
    // Temporarily expose input value. Use with caution.
    get trafficTypeInput() {
        return this._trafficType;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    resetVpcId() {
        this._vpcId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            eni_id: cdktf.stringToTerraform(this._eniId),
            iam_role_arn: cdktf.stringToTerraform(this._iamRoleArn),
            log_destination: cdktf.stringToTerraform(this._logDestination),
            log_destination_type: cdktf.stringToTerraform(this._logDestinationType),
            log_format: cdktf.stringToTerraform(this._logFormat),
            log_group_name: cdktf.stringToTerraform(this._logGroupName),
            max_aggregation_interval: cdktf.numberToTerraform(this._maxAggregationInterval),
            subnet_id: cdktf.stringToTerraform(this._subnetId),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            traffic_type: cdktf.stringToTerraform(this._trafficType),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
        };
    }
}
exports.FlowLog = FlowLog;
_a = JSII_RTTI_SYMBOL_1;
FlowLog[_a] = { fqn: "hashicorp_aws.FlowLog", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,