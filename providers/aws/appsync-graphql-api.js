"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsyncGraphqlApi = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_ttl: cdktf.numberToTerraform(struct.authTtl),
        client_id: cdktf.stringToTerraform(struct.clientId),
        iat_ttl: cdktf.numberToTerraform(struct.iatTtl),
        issuer: cdktf.stringToTerraform(struct.issuer),
    };
}
function appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_id_client_regex: cdktf.stringToTerraform(struct.appIdClientRegex),
        aws_region: cdktf.stringToTerraform(struct.awsRegion),
        user_pool_id: cdktf.stringToTerraform(struct.userPoolId),
    };
}
function appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        authentication_type: cdktf.stringToTerraform(struct.authenticationType),
        openid_connect_config: cdktf.listMapper(appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform)(struct.openidConnectConfig),
        user_pool_config: cdktf.listMapper(appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform)(struct.userPoolConfig),
    };
}
function appsyncGraphqlApiLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logs_role_arn: cdktf.stringToTerraform(struct.cloudwatchLogsRoleArn),
        exclude_verbose_content: cdktf.booleanToTerraform(struct.excludeVerboseContent),
        field_log_level: cdktf.stringToTerraform(struct.fieldLogLevel),
    };
}
function appsyncGraphqlApiOpenidConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        auth_ttl: cdktf.numberToTerraform(struct.authTtl),
        client_id: cdktf.stringToTerraform(struct.clientId),
        iat_ttl: cdktf.numberToTerraform(struct.iatTtl),
        issuer: cdktf.stringToTerraform(struct.issuer),
    };
}
function appsyncGraphqlApiUserPoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_id_client_regex: cdktf.stringToTerraform(struct.appIdClientRegex),
        aws_region: cdktf.stringToTerraform(struct.awsRegion),
        default_action: cdktf.stringToTerraform(struct.defaultAction),
        user_pool_id: cdktf.stringToTerraform(struct.userPoolId),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/appsync_graphql_api.html aws_appsync_graphql_api}.
 */
class AppsyncGraphqlApi extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appsync_graphql_api.html aws_appsync_graphql_api} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appsync_graphql_api',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._authenticationType = config.authenticationType;
        this._name = config.name;
        this._schema = config.schema;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._xrayEnabled = config.xrayEnabled;
        this._additionalAuthenticationProvider = config.additionalAuthenticationProvider;
        this._logConfig = config.logConfig;
        this._openidConnectConfig = config.openidConnectConfig;
        this._userPoolConfig = config.userPoolConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authenticationType() {
        return this.getStringAttribute('authentication_type');
    }
    set authenticationType(value) {
        this._authenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypeInput() {
        return this._authenticationType;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    resetSchema() {
        this._schema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // uris - computed: true, optional: false, required: false
    uris(key) {
        return new cdktf.StringMap(this, 'uris').lookup(key);
    }
    get xrayEnabled() {
        return this.getBooleanAttribute('xray_enabled');
    }
    set xrayEnabled(value) {
        this._xrayEnabled = value;
    }
    resetXrayEnabled() {
        this._xrayEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xrayEnabledInput() {
        return this._xrayEnabled;
    }
    get additionalAuthenticationProvider() {
        return this.interpolationForAttribute('additional_authentication_provider');
    }
    set additionalAuthenticationProvider(value) {
        this._additionalAuthenticationProvider = value;
    }
    resetAdditionalAuthenticationProvider() {
        this._additionalAuthenticationProvider = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalAuthenticationProviderInput() {
        return this._additionalAuthenticationProvider;
    }
    get logConfig() {
        return this.interpolationForAttribute('log_config');
    }
    set logConfig(value) {
        this._logConfig = value;
    }
    resetLogConfig() {
        this._logConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig;
    }
    get openidConnectConfig() {
        return this.interpolationForAttribute('openid_connect_config');
    }
    set openidConnectConfig(value) {
        this._openidConnectConfig = value;
    }
    resetOpenidConnectConfig() {
        this._openidConnectConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openidConnectConfigInput() {
        return this._openidConnectConfig;
    }
    get userPoolConfig() {
        return this.interpolationForAttribute('user_pool_config');
    }
    set userPoolConfig(value) {
        this._userPoolConfig = value;
    }
    resetUserPoolConfig() {
        this._userPoolConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolConfigInput() {
        return this._userPoolConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authentication_type: cdktf.stringToTerraform(this._authenticationType),
            name: cdktf.stringToTerraform(this._name),
            schema: cdktf.stringToTerraform(this._schema),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            xray_enabled: cdktf.booleanToTerraform(this._xrayEnabled),
            additional_authentication_provider: cdktf.listMapper(appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform)(this._additionalAuthenticationProvider),
            log_config: cdktf.listMapper(appsyncGraphqlApiLogConfigToTerraform)(this._logConfig),
            openid_connect_config: cdktf.listMapper(appsyncGraphqlApiOpenidConnectConfigToTerraform)(this._openidConnectConfig),
            user_pool_config: cdktf.listMapper(appsyncGraphqlApiUserPoolConfigToTerraform)(this._userPoolConfig),
        };
    }
}
exports.AppsyncGraphqlApi = AppsyncGraphqlApi;
_a = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApi[_a] = { fqn: "hashicorp_aws.AppsyncGraphqlApi", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,