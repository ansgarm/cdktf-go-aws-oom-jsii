"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallFirewall = exports.NetworkfirewallFirewallFirewallStatus = exports.NetworkfirewallFirewallFirewallStatusSyncStates = exports.NetworkfirewallFirewallFirewallStatusSyncStatesAttachment = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
class NetworkfirewallFirewallFirewallStatusSyncStatesAttachment extends cdktf.ComplexComputedList {
    // endpoint_id - computed: true, optional: false, required: false
    get endpointId() {
        return this.getStringAttribute('endpoint_id');
    }
    // subnet_id - computed: true, optional: false, required: false
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
}
exports.NetworkfirewallFirewallFirewallStatusSyncStatesAttachment = NetworkfirewallFirewallFirewallStatusSyncStatesAttachment;
_a = JSII_RTTI_SYMBOL_1;
NetworkfirewallFirewallFirewallStatusSyncStatesAttachment[_a] = { fqn: "hashicorp_aws.NetworkfirewallFirewallFirewallStatusSyncStatesAttachment", version: "0.0.0" };
class NetworkfirewallFirewallFirewallStatusSyncStates extends cdktf.ComplexComputedList {
    // attachment - computed: true, optional: false, required: false
    get attachment() {
        return this.interpolationForAttribute('attachment');
    }
    // availability_zone - computed: true, optional: false, required: false
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
}
exports.NetworkfirewallFirewallFirewallStatusSyncStates = NetworkfirewallFirewallFirewallStatusSyncStates;
_b = JSII_RTTI_SYMBOL_1;
NetworkfirewallFirewallFirewallStatusSyncStates[_b] = { fqn: "hashicorp_aws.NetworkfirewallFirewallFirewallStatusSyncStates", version: "0.0.0" };
class NetworkfirewallFirewallFirewallStatus extends cdktf.ComplexComputedList {
    // sync_states - computed: true, optional: false, required: false
    get syncStates() {
        return this.interpolationForAttribute('sync_states');
    }
}
exports.NetworkfirewallFirewallFirewallStatus = NetworkfirewallFirewallFirewallStatus;
_c = JSII_RTTI_SYMBOL_1;
NetworkfirewallFirewallFirewallStatus[_c] = { fqn: "hashicorp_aws.NetworkfirewallFirewallFirewallStatus", version: "0.0.0" };
function networkfirewallFirewallSubnetMappingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/networkfirewall_firewall.html aws_networkfirewall_firewall}.
 */
class NetworkfirewallFirewall extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/networkfirewall_firewall.html aws_networkfirewall_firewall} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_networkfirewall_firewall',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deleteProtection = config.deleteProtection;
        this._description = config.description;
        this._firewallPolicyArn = config.firewallPolicyArn;
        this._firewallPolicyChangeProtection = config.firewallPolicyChangeProtection;
        this._name = config.name;
        this._subnetChangeProtection = config.subnetChangeProtection;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._vpcId = config.vpcId;
        this._subnetMapping = config.subnetMapping;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get deleteProtection() {
        return this.getBooleanAttribute('delete_protection');
    }
    set deleteProtection(value) {
        this._deleteProtection = value;
    }
    resetDeleteProtection() {
        this._deleteProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteProtectionInput() {
        return this._deleteProtection;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get firewallPolicyArn() {
        return this.getStringAttribute('firewall_policy_arn');
    }
    set firewallPolicyArn(value) {
        this._firewallPolicyArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallPolicyArnInput() {
        return this._firewallPolicyArn;
    }
    get firewallPolicyChangeProtection() {
        return this.getBooleanAttribute('firewall_policy_change_protection');
    }
    set firewallPolicyChangeProtection(value) {
        this._firewallPolicyChangeProtection = value;
    }
    resetFirewallPolicyChangeProtection() {
        this._firewallPolicyChangeProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get firewallPolicyChangeProtectionInput() {
        return this._firewallPolicyChangeProtection;
    }
    // firewall_status - computed: true, optional: false, required: false
    firewallStatus(index) {
        return new NetworkfirewallFirewallFirewallStatus(this, 'firewall_status', index);
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get subnetChangeProtection() {
        return this.getBooleanAttribute('subnet_change_protection');
    }
    set subnetChangeProtection(value) {
        this._subnetChangeProtection = value;
    }
    resetSubnetChangeProtection() {
        this._subnetChangeProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetChangeProtectionInput() {
        return this._subnetChangeProtection;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // update_token - computed: true, optional: false, required: false
    get updateToken() {
        return this.getStringAttribute('update_token');
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    get subnetMapping() {
        return this.interpolationForAttribute('subnet_mapping');
    }
    set subnetMapping(value) {
        this._subnetMapping = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetMappingInput() {
        return this._subnetMapping;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            delete_protection: cdktf.booleanToTerraform(this._deleteProtection),
            description: cdktf.stringToTerraform(this._description),
            firewall_policy_arn: cdktf.stringToTerraform(this._firewallPolicyArn),
            firewall_policy_change_protection: cdktf.booleanToTerraform(this._firewallPolicyChangeProtection),
            name: cdktf.stringToTerraform(this._name),
            subnet_change_protection: cdktf.booleanToTerraform(this._subnetChangeProtection),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
            subnet_mapping: cdktf.listMapper(networkfirewallFirewallSubnetMappingToTerraform)(this._subnetMapping),
        };
    }
}
exports.NetworkfirewallFirewall = NetworkfirewallFirewall;
_d = JSII_RTTI_SYMBOL_1;
NetworkfirewallFirewall[_d] = { fqn: "hashicorp_aws.NetworkfirewallFirewall", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,