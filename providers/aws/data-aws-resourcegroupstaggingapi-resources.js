"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsResourcegroupstaggingapiResources = exports.DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList = exports.DataAwsResourcegroupstaggingapiResourcesResourceTagMappingListComplianceDetails = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
class DataAwsResourcegroupstaggingapiResourcesResourceTagMappingListComplianceDetails extends cdktf.ComplexComputedList {
    // compliance_status - computed: true, optional: false, required: false
    get complianceStatus() {
        return this.getBooleanAttribute('compliance_status');
    }
    // keys_with_noncompliant_values - computed: true, optional: false, required: false
    get keysWithNoncompliantValues() {
        return this.getListAttribute('keys_with_noncompliant_values');
    }
    // non_compliant_keys - computed: true, optional: false, required: false
    get nonCompliantKeys() {
        return this.getListAttribute('non_compliant_keys');
    }
}
exports.DataAwsResourcegroupstaggingapiResourcesResourceTagMappingListComplianceDetails = DataAwsResourcegroupstaggingapiResourcesResourceTagMappingListComplianceDetails;
_a = JSII_RTTI_SYMBOL_1;
DataAwsResourcegroupstaggingapiResourcesResourceTagMappingListComplianceDetails[_a] = { fqn: "hashicorp_aws.DataAwsResourcegroupstaggingapiResourcesResourceTagMappingListComplianceDetails", version: "0.0.0" };
class DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList extends cdktf.ComplexComputedList {
    // compliance_details - computed: true, optional: false, required: false
    get complianceDetails() {
        return this.interpolationForAttribute('compliance_details');
    }
    // resource_arn - computed: true, optional: false, required: false
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return this.interpolationForAttribute('tags');
    }
}
exports.DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList = DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList;
_b = JSII_RTTI_SYMBOL_1;
DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList[_b] = { fqn: "hashicorp_aws.DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList", version: "0.0.0" };
function dataAwsResourcegroupstaggingapiResourcesTagFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/resourcegroupstaggingapi_resources.html aws_resourcegroupstaggingapi_resources}.
 */
class DataAwsResourcegroupstaggingapiResources extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/resourcegroupstaggingapi_resources.html aws_resourcegroupstaggingapi_resources} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_resourcegroupstaggingapi_resources',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._excludeCompliantResources = config.excludeCompliantResources;
        this._includeComplianceDetails = config.includeComplianceDetails;
        this._resourceArnList = config.resourceArnList;
        this._resourceTypeFilters = config.resourceTypeFilters;
        this._tagFilter = config.tagFilter;
    }
    get excludeCompliantResources() {
        return this.getBooleanAttribute('exclude_compliant_resources');
    }
    set excludeCompliantResources(value) {
        this._excludeCompliantResources = value;
    }
    resetExcludeCompliantResources() {
        this._excludeCompliantResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeCompliantResourcesInput() {
        return this._excludeCompliantResources;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get includeComplianceDetails() {
        return this.getBooleanAttribute('include_compliance_details');
    }
    set includeComplianceDetails(value) {
        this._includeComplianceDetails = value;
    }
    resetIncludeComplianceDetails() {
        this._includeComplianceDetails = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeComplianceDetailsInput() {
        return this._includeComplianceDetails;
    }
    get resourceArnList() {
        return this.getListAttribute('resource_arn_list');
    }
    set resourceArnList(value) {
        this._resourceArnList = value;
    }
    resetResourceArnList() {
        this._resourceArnList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnListInput() {
        return this._resourceArnList;
    }
    // resource_tag_mapping_list - computed: true, optional: false, required: false
    resourceTagMappingList(index) {
        return new DataAwsResourcegroupstaggingapiResourcesResourceTagMappingList(this, 'resource_tag_mapping_list', index);
    }
    get resourceTypeFilters() {
        return this.getListAttribute('resource_type_filters');
    }
    set resourceTypeFilters(value) {
        this._resourceTypeFilters = value;
    }
    resetResourceTypeFilters() {
        this._resourceTypeFilters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeFiltersInput() {
        return this._resourceTypeFilters;
    }
    get tagFilter() {
        return this.interpolationForAttribute('tag_filter');
    }
    set tagFilter(value) {
        this._tagFilter = value;
    }
    resetTagFilter() {
        this._tagFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagFilterInput() {
        return this._tagFilter;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            exclude_compliant_resources: cdktf.booleanToTerraform(this._excludeCompliantResources),
            include_compliance_details: cdktf.booleanToTerraform(this._includeComplianceDetails),
            resource_arn_list: cdktf.listMapper(cdktf.stringToTerraform)(this._resourceArnList),
            resource_type_filters: cdktf.listMapper(cdktf.stringToTerraform)(this._resourceTypeFilters),
            tag_filter: cdktf.listMapper(dataAwsResourcegroupstaggingapiResourcesTagFilterToTerraform)(this._tagFilter),
        };
    }
}
exports.DataAwsResourcegroupstaggingapiResources = DataAwsResourcegroupstaggingapiResources;
_c = JSII_RTTI_SYMBOL_1;
DataAwsResourcegroupstaggingapiResources[_c] = { fqn: "hashicorp_aws.DataAwsResourcegroupstaggingapiResources", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,