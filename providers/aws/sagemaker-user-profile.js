"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerUserProfile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
    };
}
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_resource_spec: cdktf.listMapper(sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform)(struct.defaultResourceSpec),
    };
}
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
    };
}
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        custom_image: cdktf.listMapper(sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform)(struct.customImage),
        default_resource_spec: cdktf.listMapper(sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform)(struct.defaultResourceSpec),
    };
}
function sagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
function sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
    };
}
function sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_resource_spec: cdktf.listMapper(sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform)(struct.defaultResourceSpec),
    };
}
function sagemakerUserProfileUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        jupyter_server_app_settings: cdktf.listMapper(sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform)(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: cdktf.listMapper(sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform)(struct.kernelGatewayAppSettings),
        sharing_settings: cdktf.listMapper(sagemakerUserProfileUserSettingsSharingSettingsToTerraform)(struct.sharingSettings),
        tensor_board_app_settings: cdktf.listMapper(sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform)(struct.tensorBoardAppSettings),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_user_profile.html aws_sagemaker_user_profile}.
 */
class SagemakerUserProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_user_profile.html aws_sagemaker_user_profile} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_user_profile',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._domainId = config.domainId;
        this._singleSignOnUserIdentifier = config.singleSignOnUserIdentifier;
        this._singleSignOnUserValue = config.singleSignOnUserValue;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._userProfileName = config.userProfileName;
        this._userSettings = config.userSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    set domainId(value) {
        this._domainId = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainIdInput() {
        return this._domainId;
    }
    // home_efs_file_system_uid - computed: true, optional: false, required: false
    get homeEfsFileSystemUid() {
        return this.getStringAttribute('home_efs_file_system_uid');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get singleSignOnUserIdentifier() {
        return this.getStringAttribute('single_sign_on_user_identifier');
    }
    set singleSignOnUserIdentifier(value) {
        this._singleSignOnUserIdentifier = value;
    }
    resetSingleSignOnUserIdentifier() {
        this._singleSignOnUserIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleSignOnUserIdentifierInput() {
        return this._singleSignOnUserIdentifier;
    }
    get singleSignOnUserValue() {
        return this.getStringAttribute('single_sign_on_user_value');
    }
    set singleSignOnUserValue(value) {
        this._singleSignOnUserValue = value;
    }
    resetSingleSignOnUserValue() {
        this._singleSignOnUserValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleSignOnUserValueInput() {
        return this._singleSignOnUserValue;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get userProfileName() {
        return this.getStringAttribute('user_profile_name');
    }
    set userProfileName(value) {
        this._userProfileName = value;
    }
    // Temporarily expose input value. Use with caution.
    get userProfileNameInput() {
        return this._userProfileName;
    }
    get userSettings() {
        return this.interpolationForAttribute('user_settings');
    }
    set userSettings(value) {
        this._userSettings = value;
    }
    resetUserSettings() {
        this._userSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userSettingsInput() {
        return this._userSettings;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_id: cdktf.stringToTerraform(this._domainId),
            single_sign_on_user_identifier: cdktf.stringToTerraform(this._singleSignOnUserIdentifier),
            single_sign_on_user_value: cdktf.stringToTerraform(this._singleSignOnUserValue),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            user_profile_name: cdktf.stringToTerraform(this._userProfileName),
            user_settings: cdktf.listMapper(sagemakerUserProfileUserSettingsToTerraform)(this._userSettings),
        };
    }
}
exports.SagemakerUserProfile = SagemakerUserProfile;
_a = JSII_RTTI_SYMBOL_1;
SagemakerUserProfile[_a] = { fqn: "hashicorp_aws.SagemakerUserProfile", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,