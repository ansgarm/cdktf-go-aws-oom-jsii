"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerFeatureGroup = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerFeatureGroupFeatureDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        feature_name: cdktf.stringToTerraform(struct.featureName),
        feature_type: cdktf.stringToTerraform(struct.featureType),
    };
}
function sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog: cdktf.stringToTerraform(struct.catalog),
        database: cdktf.stringToTerraform(struct.database),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
function sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
function sagemakerFeatureGroupOfflineStoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_glue_table_creation: cdktf.booleanToTerraform(struct.disableGlueTableCreation),
        data_catalog_config: cdktf.listMapper(sagemakerFeatureGroupOfflineStoreConfigDataCatalogConfigToTerraform)(struct.dataCatalogConfig),
        s3_storage_config: cdktf.listMapper(sagemakerFeatureGroupOfflineStoreConfigS3StorageConfigToTerraform)(struct.s3StorageConfig),
    };
}
function sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
    };
}
function sagemakerFeatureGroupOnlineStoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enable_online_store: cdktf.booleanToTerraform(struct.enableOnlineStore),
        security_config: cdktf.listMapper(sagemakerFeatureGroupOnlineStoreConfigSecurityConfigToTerraform)(struct.securityConfig),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_feature_group.html aws_sagemaker_feature_group}.
 */
class SagemakerFeatureGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_feature_group.html aws_sagemaker_feature_group} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_feature_group',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._eventTimeFeatureName = config.eventTimeFeatureName;
        this._featureGroupName = config.featureGroupName;
        this._recordIdentifierFeatureName = config.recordIdentifierFeatureName;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._featureDefinition = config.featureDefinition;
        this._offlineStoreConfig = config.offlineStoreConfig;
        this._onlineStoreConfig = config.onlineStoreConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get eventTimeFeatureName() {
        return this.getStringAttribute('event_time_feature_name');
    }
    set eventTimeFeatureName(value) {
        this._eventTimeFeatureName = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTimeFeatureNameInput() {
        return this._eventTimeFeatureName;
    }
    get featureGroupName() {
        return this.getStringAttribute('feature_group_name');
    }
    set featureGroupName(value) {
        this._featureGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureGroupNameInput() {
        return this._featureGroupName;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get recordIdentifierFeatureName() {
        return this.getStringAttribute('record_identifier_feature_name');
    }
    set recordIdentifierFeatureName(value) {
        this._recordIdentifierFeatureName = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordIdentifierFeatureNameInput() {
        return this._recordIdentifierFeatureName;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get featureDefinition() {
        return this.interpolationForAttribute('feature_definition');
    }
    set featureDefinition(value) {
        this._featureDefinition = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureDefinitionInput() {
        return this._featureDefinition;
    }
    get offlineStoreConfig() {
        return this.interpolationForAttribute('offline_store_config');
    }
    set offlineStoreConfig(value) {
        this._offlineStoreConfig = value;
    }
    resetOfflineStoreConfig() {
        this._offlineStoreConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offlineStoreConfigInput() {
        return this._offlineStoreConfig;
    }
    get onlineStoreConfig() {
        return this.interpolationForAttribute('online_store_config');
    }
    set onlineStoreConfig(value) {
        this._onlineStoreConfig = value;
    }
    resetOnlineStoreConfig() {
        this._onlineStoreConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onlineStoreConfigInput() {
        return this._onlineStoreConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            event_time_feature_name: cdktf.stringToTerraform(this._eventTimeFeatureName),
            feature_group_name: cdktf.stringToTerraform(this._featureGroupName),
            record_identifier_feature_name: cdktf.stringToTerraform(this._recordIdentifierFeatureName),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            feature_definition: cdktf.listMapper(sagemakerFeatureGroupFeatureDefinitionToTerraform)(this._featureDefinition),
            offline_store_config: cdktf.listMapper(sagemakerFeatureGroupOfflineStoreConfigToTerraform)(this._offlineStoreConfig),
            online_store_config: cdktf.listMapper(sagemakerFeatureGroupOnlineStoreConfigToTerraform)(this._onlineStoreConfig),
        };
    }
}
exports.SagemakerFeatureGroup = SagemakerFeatureGroup;
_a = JSII_RTTI_SYMBOL_1;
SagemakerFeatureGroup[_a] = { fqn: "hashicorp_aws.SagemakerFeatureGroup", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,