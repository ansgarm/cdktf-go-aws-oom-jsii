"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LexBot = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lexBotAbortStatementMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        content_type: cdktf.stringToTerraform(struct.contentType),
        group_number: cdktf.numberToTerraform(struct.groupNumber),
    };
}
function lexBotAbortStatementToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        response_card: cdktf.stringToTerraform(struct.responseCard),
        message: cdktf.listMapper(lexBotAbortStatementMessageToTerraform)(struct.message),
    };
}
function lexBotClarificationPromptMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        content_type: cdktf.stringToTerraform(struct.contentType),
        group_number: cdktf.numberToTerraform(struct.groupNumber),
    };
}
function lexBotClarificationPromptToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        max_attempts: cdktf.numberToTerraform(struct.maxAttempts),
        response_card: cdktf.stringToTerraform(struct.responseCard),
        message: cdktf.listMapper(lexBotClarificationPromptMessageToTerraform)(struct.message),
    };
}
function lexBotIntentToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        intent_name: cdktf.stringToTerraform(struct.intentName),
        intent_version: cdktf.stringToTerraform(struct.intentVersion),
    };
}
function lexBotTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/lex_bot.html aws_lex_bot}.
 */
class LexBot extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/lex_bot.html aws_lex_bot} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_lex_bot',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._childDirected = config.childDirected;
        this._createVersion = config.createVersion;
        this._description = config.description;
        this._detectSentiment = config.detectSentiment;
        this._enableModelImprovements = config.enableModelImprovements;
        this._idleSessionTtlInSeconds = config.idleSessionTtlInSeconds;
        this._locale = config.locale;
        this._name = config.name;
        this._nluIntentConfidenceThreshold = config.nluIntentConfidenceThreshold;
        this._processBehavior = config.processBehavior;
        this._voiceId = config.voiceId;
        this._abortStatement = config.abortStatement;
        this._clarificationPrompt = config.clarificationPrompt;
        this._intent = config.intent;
        this._timeouts = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // checksum - computed: true, optional: false, required: false
    get checksum() {
        return this.getStringAttribute('checksum');
    }
    get childDirected() {
        return this.getBooleanAttribute('child_directed');
    }
    set childDirected(value) {
        this._childDirected = value;
    }
    // Temporarily expose input value. Use with caution.
    get childDirectedInput() {
        return this._childDirected;
    }
    get createVersion() {
        return this.getBooleanAttribute('create_version');
    }
    set createVersion(value) {
        this._createVersion = value;
    }
    resetCreateVersion() {
        this._createVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createVersionInput() {
        return this._createVersion;
    }
    // created_date - computed: true, optional: false, required: false
    get createdDate() {
        return this.getStringAttribute('created_date');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get detectSentiment() {
        return this.getBooleanAttribute('detect_sentiment');
    }
    set detectSentiment(value) {
        this._detectSentiment = value;
    }
    resetDetectSentiment() {
        this._detectSentiment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detectSentimentInput() {
        return this._detectSentiment;
    }
    get enableModelImprovements() {
        return this.getBooleanAttribute('enable_model_improvements');
    }
    set enableModelImprovements(value) {
        this._enableModelImprovements = value;
    }
    resetEnableModelImprovements() {
        this._enableModelImprovements = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableModelImprovementsInput() {
        return this._enableModelImprovements;
    }
    // failure_reason - computed: true, optional: false, required: false
    get failureReason() {
        return this.getStringAttribute('failure_reason');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get idleSessionTtlInSeconds() {
        return this.getNumberAttribute('idle_session_ttl_in_seconds');
    }
    set idleSessionTtlInSeconds(value) {
        this._idleSessionTtlInSeconds = value;
    }
    resetIdleSessionTtlInSeconds() {
        this._idleSessionTtlInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleSessionTtlInSecondsInput() {
        return this._idleSessionTtlInSeconds;
    }
    // last_updated_date - computed: true, optional: false, required: false
    get lastUpdatedDate() {
        return this.getStringAttribute('last_updated_date');
    }
    get locale() {
        return this.getStringAttribute('locale');
    }
    set locale(value) {
        this._locale = value;
    }
    resetLocale() {
        this._locale = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localeInput() {
        return this._locale;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nluIntentConfidenceThreshold() {
        return this.getNumberAttribute('nlu_intent_confidence_threshold');
    }
    set nluIntentConfidenceThreshold(value) {
        this._nluIntentConfidenceThreshold = value;
    }
    resetNluIntentConfidenceThreshold() {
        this._nluIntentConfidenceThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nluIntentConfidenceThresholdInput() {
        return this._nluIntentConfidenceThreshold;
    }
    get processBehavior() {
        return this.getStringAttribute('process_behavior');
    }
    set processBehavior(value) {
        this._processBehavior = value;
    }
    resetProcessBehavior() {
        this._processBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processBehaviorInput() {
        return this._processBehavior;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
    get voiceId() {
        return this.getStringAttribute('voice_id');
    }
    set voiceId(value) {
        this._voiceId = value;
    }
    resetVoiceId() {
        this._voiceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get voiceIdInput() {
        return this._voiceId;
    }
    get abortStatement() {
        return this.interpolationForAttribute('abort_statement');
    }
    set abortStatement(value) {
        this._abortStatement = value;
    }
    // Temporarily expose input value. Use with caution.
    get abortStatementInput() {
        return this._abortStatement;
    }
    get clarificationPrompt() {
        return this.interpolationForAttribute('clarification_prompt');
    }
    set clarificationPrompt(value) {
        this._clarificationPrompt = value;
    }
    resetClarificationPrompt() {
        this._clarificationPrompt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clarificationPromptInput() {
        return this._clarificationPrompt;
    }
    get intent() {
        return this.interpolationForAttribute('intent');
    }
    set intent(value) {
        this._intent = value;
    }
    // Temporarily expose input value. Use with caution.
    get intentInput() {
        return this._intent;
    }
    get timeouts() {
        return this.interpolationForAttribute('timeouts');
    }
    set timeouts(value) {
        this._timeouts = value;
    }
    resetTimeouts() {
        this._timeouts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            child_directed: cdktf.booleanToTerraform(this._childDirected),
            create_version: cdktf.booleanToTerraform(this._createVersion),
            description: cdktf.stringToTerraform(this._description),
            detect_sentiment: cdktf.booleanToTerraform(this._detectSentiment),
            enable_model_improvements: cdktf.booleanToTerraform(this._enableModelImprovements),
            idle_session_ttl_in_seconds: cdktf.numberToTerraform(this._idleSessionTtlInSeconds),
            locale: cdktf.stringToTerraform(this._locale),
            name: cdktf.stringToTerraform(this._name),
            nlu_intent_confidence_threshold: cdktf.numberToTerraform(this._nluIntentConfidenceThreshold),
            process_behavior: cdktf.stringToTerraform(this._processBehavior),
            voice_id: cdktf.stringToTerraform(this._voiceId),
            abort_statement: cdktf.listMapper(lexBotAbortStatementToTerraform)(this._abortStatement),
            clarification_prompt: cdktf.listMapper(lexBotClarificationPromptToTerraform)(this._clarificationPrompt),
            intent: cdktf.listMapper(lexBotIntentToTerraform)(this._intent),
            timeouts: lexBotTimeoutsToTerraform(this._timeouts),
        };
    }
}
exports.LexBot = LexBot;
_a = JSII_RTTI_SYMBOL_1;
LexBot[_a] = { fqn: "hashicorp_aws.LexBot", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,