"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElastictranscoderPipeline = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function elastictranscoderPipelineContentConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        storage_class: cdktf.stringToTerraform(struct.storageClass),
    };
}
function elastictranscoderPipelineContentConfigPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access: cdktf.listMapper(cdktf.stringToTerraform)(struct.access),
        grantee: cdktf.stringToTerraform(struct.grantee),
        grantee_type: cdktf.stringToTerraform(struct.granteeType),
    };
}
function elastictranscoderPipelineNotificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        completed: cdktf.stringToTerraform(struct.completed),
        error: cdktf.stringToTerraform(struct.error),
        progressing: cdktf.stringToTerraform(struct.progressing),
        warning: cdktf.stringToTerraform(struct.warning),
    };
}
function elastictranscoderPipelineThumbnailConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        storage_class: cdktf.stringToTerraform(struct.storageClass),
    };
}
function elastictranscoderPipelineThumbnailConfigPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access: cdktf.listMapper(cdktf.stringToTerraform)(struct.access),
        grantee: cdktf.stringToTerraform(struct.grantee),
        grantee_type: cdktf.stringToTerraform(struct.granteeType),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/elastictranscoder_pipeline.html aws_elastictranscoder_pipeline}.
 */
class ElastictranscoderPipeline extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/elastictranscoder_pipeline.html aws_elastictranscoder_pipeline} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_elastictranscoder_pipeline',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._awsKmsKeyArn = config.awsKmsKeyArn;
        this._inputBucket = config.inputBucket;
        this._name = config.name;
        this._outputBucket = config.outputBucket;
        this._role = config.role;
        this._contentConfig = config.contentConfig;
        this._contentConfigPermissions = config.contentConfigPermissions;
        this._notifications = config.notifications;
        this._thumbnailConfig = config.thumbnailConfig;
        this._thumbnailConfigPermissions = config.thumbnailConfigPermissions;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get awsKmsKeyArn() {
        return this.getStringAttribute('aws_kms_key_arn');
    }
    set awsKmsKeyArn(value) {
        this._awsKmsKeyArn = value;
    }
    resetAwsKmsKeyArn() {
        this._awsKmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsKmsKeyArnInput() {
        return this._awsKmsKeyArn;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get inputBucket() {
        return this.getStringAttribute('input_bucket');
    }
    set inputBucket(value) {
        this._inputBucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputBucketInput() {
        return this._inputBucket;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get outputBucket() {
        return this.getStringAttribute('output_bucket');
    }
    set outputBucket(value) {
        this._outputBucket = value;
    }
    resetOutputBucket() {
        this._outputBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputBucketInput() {
        return this._outputBucket;
    }
    get role() {
        return this.getStringAttribute('role');
    }
    set role(value) {
        this._role = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleInput() {
        return this._role;
    }
    get contentConfig() {
        return this.interpolationForAttribute('content_config');
    }
    set contentConfig(value) {
        this._contentConfig = value;
    }
    resetContentConfig() {
        this._contentConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentConfigInput() {
        return this._contentConfig;
    }
    get contentConfigPermissions() {
        return this.interpolationForAttribute('content_config_permissions');
    }
    set contentConfigPermissions(value) {
        this._contentConfigPermissions = value;
    }
    resetContentConfigPermissions() {
        this._contentConfigPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentConfigPermissionsInput() {
        return this._contentConfigPermissions;
    }
    get notifications() {
        return this.interpolationForAttribute('notifications');
    }
    set notifications(value) {
        this._notifications = value;
    }
    resetNotifications() {
        this._notifications = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationsInput() {
        return this._notifications;
    }
    get thumbnailConfig() {
        return this.interpolationForAttribute('thumbnail_config');
    }
    set thumbnailConfig(value) {
        this._thumbnailConfig = value;
    }
    resetThumbnailConfig() {
        this._thumbnailConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thumbnailConfigInput() {
        return this._thumbnailConfig;
    }
    get thumbnailConfigPermissions() {
        return this.interpolationForAttribute('thumbnail_config_permissions');
    }
    set thumbnailConfigPermissions(value) {
        this._thumbnailConfigPermissions = value;
    }
    resetThumbnailConfigPermissions() {
        this._thumbnailConfigPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thumbnailConfigPermissionsInput() {
        return this._thumbnailConfigPermissions;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            aws_kms_key_arn: cdktf.stringToTerraform(this._awsKmsKeyArn),
            input_bucket: cdktf.stringToTerraform(this._inputBucket),
            name: cdktf.stringToTerraform(this._name),
            output_bucket: cdktf.stringToTerraform(this._outputBucket),
            role: cdktf.stringToTerraform(this._role),
            content_config: cdktf.listMapper(elastictranscoderPipelineContentConfigToTerraform)(this._contentConfig),
            content_config_permissions: cdktf.listMapper(elastictranscoderPipelineContentConfigPermissionsToTerraform)(this._contentConfigPermissions),
            notifications: cdktf.listMapper(elastictranscoderPipelineNotificationsToTerraform)(this._notifications),
            thumbnail_config: cdktf.listMapper(elastictranscoderPipelineThumbnailConfigToTerraform)(this._thumbnailConfig),
            thumbnail_config_permissions: cdktf.listMapper(elastictranscoderPipelineThumbnailConfigPermissionsToTerraform)(this._thumbnailConfigPermissions),
        };
    }
}
exports.ElastictranscoderPipeline = ElastictranscoderPipeline;
_a = JSII_RTTI_SYMBOL_1;
ElastictranscoderPipeline[_a] = { fqn: "hashicorp_aws.ElastictranscoderPipeline", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,