"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueClassifier = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function glueClassifierCsvClassifierToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        allow_single_column: cdktf.booleanToTerraform(struct.allowSingleColumn),
        contains_header: cdktf.stringToTerraform(struct.containsHeader),
        delimiter: cdktf.stringToTerraform(struct.delimiter),
        disable_value_trimming: cdktf.booleanToTerraform(struct.disableValueTrimming),
        header: cdktf.listMapper(cdktf.stringToTerraform)(struct.header),
        quote_symbol: cdktf.stringToTerraform(struct.quoteSymbol),
    };
}
function glueClassifierGrokClassifierToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        classification: cdktf.stringToTerraform(struct.classification),
        custom_patterns: cdktf.stringToTerraform(struct.customPatterns),
        grok_pattern: cdktf.stringToTerraform(struct.grokPattern),
    };
}
function glueClassifierJsonClassifierToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        json_path: cdktf.stringToTerraform(struct.jsonPath),
    };
}
function glueClassifierXmlClassifierToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        classification: cdktf.stringToTerraform(struct.classification),
        row_tag: cdktf.stringToTerraform(struct.rowTag),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/glue_classifier.html aws_glue_classifier}.
 */
class GlueClassifier extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/glue_classifier.html aws_glue_classifier} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_classifier',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._csvClassifier = config.csvClassifier;
        this._grokClassifier = config.grokClassifier;
        this._jsonClassifier = config.jsonClassifier;
        this._xmlClassifier = config.xmlClassifier;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get csvClassifier() {
        return this.interpolationForAttribute('csv_classifier');
    }
    set csvClassifier(value) {
        this._csvClassifier = value;
    }
    resetCsvClassifier() {
        this._csvClassifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvClassifierInput() {
        return this._csvClassifier;
    }
    get grokClassifier() {
        return this.interpolationForAttribute('grok_classifier');
    }
    set grokClassifier(value) {
        this._grokClassifier = value;
    }
    resetGrokClassifier() {
        this._grokClassifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grokClassifierInput() {
        return this._grokClassifier;
    }
    get jsonClassifier() {
        return this.interpolationForAttribute('json_classifier');
    }
    set jsonClassifier(value) {
        this._jsonClassifier = value;
    }
    resetJsonClassifier() {
        this._jsonClassifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonClassifierInput() {
        return this._jsonClassifier;
    }
    get xmlClassifier() {
        return this.interpolationForAttribute('xml_classifier');
    }
    set xmlClassifier(value) {
        this._xmlClassifier = value;
    }
    resetXmlClassifier() {
        this._xmlClassifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xmlClassifierInput() {
        return this._xmlClassifier;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            csv_classifier: cdktf.listMapper(glueClassifierCsvClassifierToTerraform)(this._csvClassifier),
            grok_classifier: cdktf.listMapper(glueClassifierGrokClassifierToTerraform)(this._grokClassifier),
            json_classifier: cdktf.listMapper(glueClassifierJsonClassifierToTerraform)(this._jsonClassifier),
            xml_classifier: cdktf.listMapper(glueClassifierXmlClassifierToTerraform)(this._xmlClassifier),
        };
    }
}
exports.GlueClassifier = GlueClassifier;
_a = JSII_RTTI_SYMBOL_1;
GlueClassifier[_a] = { fqn: "hashicorp_aws.GlueClassifier", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,