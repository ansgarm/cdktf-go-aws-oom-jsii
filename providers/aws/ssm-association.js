"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmAssociation = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ssmAssociationOutputLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        s3_bucket_name: cdktf.stringToTerraform(struct.s3BucketName),
        s3_key_prefix: cdktf.stringToTerraform(struct.s3KeyPrefix),
    };
}
function ssmAssociationTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/ssm_association.html aws_ssm_association}.
 */
class SsmAssociation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ssm_association.html aws_ssm_association} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ssm_association',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._applyOnlyAtCronInterval = config.applyOnlyAtCronInterval;
        this._associationName = config.associationName;
        this._automationTargetParameterName = config.automationTargetParameterName;
        this._complianceSeverity = config.complianceSeverity;
        this._documentVersion = config.documentVersion;
        this._instanceId = config.instanceId;
        this._maxConcurrency = config.maxConcurrency;
        this._maxErrors = config.maxErrors;
        this._name = config.name;
        this._parameters = config.parameters;
        this._scheduleExpression = config.scheduleExpression;
        this._outputLocation = config.outputLocation;
        this._targets = config.targets;
    }
    get applyOnlyAtCronInterval() {
        return this.getBooleanAttribute('apply_only_at_cron_interval');
    }
    set applyOnlyAtCronInterval(value) {
        this._applyOnlyAtCronInterval = value;
    }
    resetApplyOnlyAtCronInterval() {
        this._applyOnlyAtCronInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applyOnlyAtCronIntervalInput() {
        return this._applyOnlyAtCronInterval;
    }
    // association_id - computed: true, optional: false, required: false
    get associationId() {
        return this.getStringAttribute('association_id');
    }
    get associationName() {
        return this.getStringAttribute('association_name');
    }
    set associationName(value) {
        this._associationName = value;
    }
    resetAssociationName() {
        this._associationName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associationNameInput() {
        return this._associationName;
    }
    get automationTargetParameterName() {
        return this.getStringAttribute('automation_target_parameter_name');
    }
    set automationTargetParameterName(value) {
        this._automationTargetParameterName = value;
    }
    resetAutomationTargetParameterName() {
        this._automationTargetParameterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automationTargetParameterNameInput() {
        return this._automationTargetParameterName;
    }
    get complianceSeverity() {
        return this.getStringAttribute('compliance_severity');
    }
    set complianceSeverity(value) {
        this._complianceSeverity = value;
    }
    resetComplianceSeverity() {
        this._complianceSeverity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get complianceSeverityInput() {
        return this._complianceSeverity;
    }
    get documentVersion() {
        return this.getStringAttribute('document_version');
    }
    set documentVersion(value) {
        this._documentVersion = value;
    }
    resetDocumentVersion() {
        this._documentVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentVersionInput() {
        return this._documentVersion;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    resetInstanceId() {
        this._instanceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
    get maxConcurrency() {
        return this.getStringAttribute('max_concurrency');
    }
    set maxConcurrency(value) {
        this._maxConcurrency = value;
    }
    resetMaxConcurrency() {
        this._maxConcurrency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrencyInput() {
        return this._maxConcurrency;
    }
    get maxErrors() {
        return this.getStringAttribute('max_errors');
    }
    set maxErrors(value) {
        this._maxErrors = value;
    }
    resetMaxErrors() {
        this._maxErrors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxErrorsInput() {
        return this._maxErrors;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parameters() {
        return this.interpolationForAttribute('parameters'); // Getting the computed value is not yet implemented
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    set scheduleExpression(value) {
        this._scheduleExpression = value;
    }
    resetScheduleExpression() {
        this._scheduleExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleExpressionInput() {
        return this._scheduleExpression;
    }
    get outputLocation() {
        return this.interpolationForAttribute('output_location');
    }
    set outputLocation(value) {
        this._outputLocation = value;
    }
    resetOutputLocation() {
        this._outputLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputLocationInput() {
        return this._outputLocation;
    }
    get targets() {
        return this.interpolationForAttribute('targets');
    }
    set targets(value) {
        this._targets = value;
    }
    resetTargets() {
        this._targets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetsInput() {
        return this._targets;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            apply_only_at_cron_interval: cdktf.booleanToTerraform(this._applyOnlyAtCronInterval),
            association_name: cdktf.stringToTerraform(this._associationName),
            automation_target_parameter_name: cdktf.stringToTerraform(this._automationTargetParameterName),
            compliance_severity: cdktf.stringToTerraform(this._complianceSeverity),
            document_version: cdktf.stringToTerraform(this._documentVersion),
            instance_id: cdktf.stringToTerraform(this._instanceId),
            max_concurrency: cdktf.stringToTerraform(this._maxConcurrency),
            max_errors: cdktf.stringToTerraform(this._maxErrors),
            name: cdktf.stringToTerraform(this._name),
            parameters: cdktf.hashMapper(cdktf.anyToTerraform)(this._parameters),
            schedule_expression: cdktf.stringToTerraform(this._scheduleExpression),
            output_location: cdktf.listMapper(ssmAssociationOutputLocationToTerraform)(this._outputLocation),
            targets: cdktf.listMapper(ssmAssociationTargetsToTerraform)(this._targets),
        };
    }
}
exports.SsmAssociation = SsmAssociation;
_a = JSII_RTTI_SYMBOL_1;
SsmAssociation[_a] = { fqn: "hashicorp_aws.SsmAssociation", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,