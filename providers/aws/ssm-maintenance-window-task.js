"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmMaintenanceWindowTask = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ssmMaintenanceWindowTaskTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersAutomationParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        document_version: cdktf.stringToTerraform(struct.documentVersion),
        parameter: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterToTerraform)(struct.parameter),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersLambdaParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_context: cdktf.stringToTerraform(struct.clientContext),
        payload: cdktf.stringToTerraform(struct.payload),
        qualifier: cdktf.stringToTerraform(struct.qualifier),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_log_group_name: cdktf.stringToTerraform(struct.cloudwatchLogGroupName),
        cloudwatch_output_enabled: cdktf.booleanToTerraform(struct.cloudwatchOutputEnabled),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        notification_arn: cdktf.stringToTerraform(struct.notificationArn),
        notification_events: cdktf.listMapper(cdktf.stringToTerraform)(struct.notificationEvents),
        notification_type: cdktf.stringToTerraform(struct.notificationType),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        comment: cdktf.stringToTerraform(struct.comment),
        document_hash: cdktf.stringToTerraform(struct.documentHash),
        document_hash_type: cdktf.stringToTerraform(struct.documentHashType),
        document_version: cdktf.stringToTerraform(struct.documentVersion),
        output_s3_bucket: cdktf.stringToTerraform(struct.outputS3Bucket),
        output_s3_key_prefix: cdktf.stringToTerraform(struct.outputS3KeyPrefix),
        service_role_arn: cdktf.stringToTerraform(struct.serviceRoleArn),
        timeout_seconds: cdktf.numberToTerraform(struct.timeoutSeconds),
        cloudwatch_config: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigToTerraform)(struct.cloudwatchConfig),
        notification_config: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigToTerraform)(struct.notificationConfig),
        parameter: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterToTerraform)(struct.parameter),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input: cdktf.stringToTerraform(struct.input),
        name: cdktf.stringToTerraform(struct.name),
    };
}
function ssmMaintenanceWindowTaskTaskInvocationParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        automation_parameters: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersAutomationParametersToTerraform)(struct.automationParameters),
        lambda_parameters: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersLambdaParametersToTerraform)(struct.lambdaParameters),
        run_command_parameters: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersToTerraform)(struct.runCommandParameters),
        step_functions_parameters: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersToTerraform)(struct.stepFunctionsParameters),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/ssm_maintenance_window_task.html aws_ssm_maintenance_window_task}.
 */
class SsmMaintenanceWindowTask extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ssm_maintenance_window_task.html aws_ssm_maintenance_window_task} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ssm_maintenance_window_task',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._maxConcurrency = config.maxConcurrency;
        this._maxErrors = config.maxErrors;
        this._name = config.name;
        this._priority = config.priority;
        this._serviceRoleArn = config.serviceRoleArn;
        this._taskArn = config.taskArn;
        this._taskType = config.taskType;
        this._windowId = config.windowId;
        this._targets = config.targets;
        this._taskInvocationParameters = config.taskInvocationParameters;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get maxConcurrency() {
        return this.getStringAttribute('max_concurrency');
    }
    set maxConcurrency(value) {
        this._maxConcurrency = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrencyInput() {
        return this._maxConcurrency;
    }
    get maxErrors() {
        return this.getStringAttribute('max_errors');
    }
    set maxErrors(value) {
        this._maxErrors = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxErrorsInput() {
        return this._maxErrors;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get serviceRoleArn() {
        return this.getStringAttribute('service_role_arn');
    }
    set serviceRoleArn(value) {
        this._serviceRoleArn = value;
    }
    resetServiceRoleArn() {
        this._serviceRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceRoleArnInput() {
        return this._serviceRoleArn;
    }
    get taskArn() {
        return this.getStringAttribute('task_arn');
    }
    set taskArn(value) {
        this._taskArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskArnInput() {
        return this._taskArn;
    }
    get taskType() {
        return this.getStringAttribute('task_type');
    }
    set taskType(value) {
        this._taskType = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskTypeInput() {
        return this._taskType;
    }
    get windowId() {
        return this.getStringAttribute('window_id');
    }
    set windowId(value) {
        this._windowId = value;
    }
    // Temporarily expose input value. Use with caution.
    get windowIdInput() {
        return this._windowId;
    }
    get targets() {
        return this.interpolationForAttribute('targets');
    }
    set targets(value) {
        this._targets = value;
    }
    resetTargets() {
        this._targets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetsInput() {
        return this._targets;
    }
    get taskInvocationParameters() {
        return this.interpolationForAttribute('task_invocation_parameters');
    }
    set taskInvocationParameters(value) {
        this._taskInvocationParameters = value;
    }
    resetTaskInvocationParameters() {
        this._taskInvocationParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskInvocationParametersInput() {
        return this._taskInvocationParameters;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            max_concurrency: cdktf.stringToTerraform(this._maxConcurrency),
            max_errors: cdktf.stringToTerraform(this._maxErrors),
            name: cdktf.stringToTerraform(this._name),
            priority: cdktf.numberToTerraform(this._priority),
            service_role_arn: cdktf.stringToTerraform(this._serviceRoleArn),
            task_arn: cdktf.stringToTerraform(this._taskArn),
            task_type: cdktf.stringToTerraform(this._taskType),
            window_id: cdktf.stringToTerraform(this._windowId),
            targets: cdktf.listMapper(ssmMaintenanceWindowTaskTargetsToTerraform)(this._targets),
            task_invocation_parameters: cdktf.listMapper(ssmMaintenanceWindowTaskTaskInvocationParametersToTerraform)(this._taskInvocationParameters),
        };
    }
}
exports.SsmMaintenanceWindowTask = SsmMaintenanceWindowTask;
_a = JSII_RTTI_SYMBOL_1;
SsmMaintenanceWindowTask[_a] = { fqn: "hashicorp_aws.SsmMaintenanceWindowTask", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,