"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppmeshGatewayRoute = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appmeshGatewayRouteSpecGrpcRouteActionTargetVirtualServiceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        virtual_service_name: cdktf.stringToTerraform(struct.virtualServiceName),
    };
}
function appmeshGatewayRouteSpecGrpcRouteActionTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        virtual_service: cdktf.listMapper(appmeshGatewayRouteSpecGrpcRouteActionTargetVirtualServiceToTerraform)(struct.virtualService),
    };
}
function appmeshGatewayRouteSpecGrpcRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        target: cdktf.listMapper(appmeshGatewayRouteSpecGrpcRouteActionTargetToTerraform)(struct.target),
    };
}
function appmeshGatewayRouteSpecGrpcRouteMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
function appmeshGatewayRouteSpecGrpcRouteToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.listMapper(appmeshGatewayRouteSpecGrpcRouteActionToTerraform)(struct.action),
        match: cdktf.listMapper(appmeshGatewayRouteSpecGrpcRouteMatchToTerraform)(struct.match),
    };
}
function appmeshGatewayRouteSpecHttp2RouteActionTargetVirtualServiceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        virtual_service_name: cdktf.stringToTerraform(struct.virtualServiceName),
    };
}
function appmeshGatewayRouteSpecHttp2RouteActionTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        virtual_service: cdktf.listMapper(appmeshGatewayRouteSpecHttp2RouteActionTargetVirtualServiceToTerraform)(struct.virtualService),
    };
}
function appmeshGatewayRouteSpecHttp2RouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        target: cdktf.listMapper(appmeshGatewayRouteSpecHttp2RouteActionTargetToTerraform)(struct.target),
    };
}
function appmeshGatewayRouteSpecHttp2RouteMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
function appmeshGatewayRouteSpecHttp2RouteToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.listMapper(appmeshGatewayRouteSpecHttp2RouteActionToTerraform)(struct.action),
        match: cdktf.listMapper(appmeshGatewayRouteSpecHttp2RouteMatchToTerraform)(struct.match),
    };
}
function appmeshGatewayRouteSpecHttpRouteActionTargetVirtualServiceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        virtual_service_name: cdktf.stringToTerraform(struct.virtualServiceName),
    };
}
function appmeshGatewayRouteSpecHttpRouteActionTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        virtual_service: cdktf.listMapper(appmeshGatewayRouteSpecHttpRouteActionTargetVirtualServiceToTerraform)(struct.virtualService),
    };
}
function appmeshGatewayRouteSpecHttpRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        target: cdktf.listMapper(appmeshGatewayRouteSpecHttpRouteActionTargetToTerraform)(struct.target),
    };
}
function appmeshGatewayRouteSpecHttpRouteMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
function appmeshGatewayRouteSpecHttpRouteToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        action: cdktf.listMapper(appmeshGatewayRouteSpecHttpRouteActionToTerraform)(struct.action),
        match: cdktf.listMapper(appmeshGatewayRouteSpecHttpRouteMatchToTerraform)(struct.match),
    };
}
function appmeshGatewayRouteSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        grpc_route: cdktf.listMapper(appmeshGatewayRouteSpecGrpcRouteToTerraform)(struct.grpcRoute),
        http2_route: cdktf.listMapper(appmeshGatewayRouteSpecHttp2RouteToTerraform)(struct.http2Route),
        http_route: cdktf.listMapper(appmeshGatewayRouteSpecHttpRouteToTerraform)(struct.httpRoute),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/appmesh_gateway_route.html aws_appmesh_gateway_route}.
 */
class AppmeshGatewayRoute extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appmesh_gateway_route.html aws_appmesh_gateway_route} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appmesh_gateway_route',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._meshName = config.meshName;
        this._meshOwner = config.meshOwner;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._virtualGatewayName = config.virtualGatewayName;
        this._spec = config.spec;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // created_date - computed: true, optional: false, required: false
    get createdDate() {
        return this.getStringAttribute('created_date');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_updated_date - computed: true, optional: false, required: false
    get lastUpdatedDate() {
        return this.getStringAttribute('last_updated_date');
    }
    get meshName() {
        return this.getStringAttribute('mesh_name');
    }
    set meshName(value) {
        this._meshName = value;
    }
    // Temporarily expose input value. Use with caution.
    get meshNameInput() {
        return this._meshName;
    }
    get meshOwner() {
        return this.getStringAttribute('mesh_owner');
    }
    set meshOwner(value) {
        this._meshOwner = value;
    }
    resetMeshOwner() {
        this._meshOwner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get meshOwnerInput() {
        return this._meshOwner;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // resource_owner - computed: true, optional: false, required: false
    get resourceOwner() {
        return this.getStringAttribute('resource_owner');
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get virtualGatewayName() {
        return this.getStringAttribute('virtual_gateway_name');
    }
    set virtualGatewayName(value) {
        this._virtualGatewayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get virtualGatewayNameInput() {
        return this._virtualGatewayName;
    }
    get spec() {
        return this.interpolationForAttribute('spec');
    }
    set spec(value) {
        this._spec = value;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            mesh_name: cdktf.stringToTerraform(this._meshName),
            mesh_owner: cdktf.stringToTerraform(this._meshOwner),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            virtual_gateway_name: cdktf.stringToTerraform(this._virtualGatewayName),
            spec: cdktf.listMapper(appmeshGatewayRouteSpecToTerraform)(this._spec),
        };
    }
}
exports.AppmeshGatewayRoute = AppmeshGatewayRoute;
_a = JSII_RTTI_SYMBOL_1;
AppmeshGatewayRoute[_a] = { fqn: "hashicorp_aws.AppmeshGatewayRoute", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,