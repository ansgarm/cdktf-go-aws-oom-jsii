"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsIdentitystoreGroup = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsIdentitystoreGroupFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_path: cdktf.stringToTerraform(struct.attributePath),
        attribute_value: cdktf.stringToTerraform(struct.attributeValue),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/identitystore_group.html aws_identitystore_group}.
 */
class DataAwsIdentitystoreGroup extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/identitystore_group.html aws_identitystore_group} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_identitystore_group',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._groupId = config.groupId;
        this._identityStoreId = config.identityStoreId;
        this._filter = config.filter;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // display_name - computed: true, optional: false, required: false
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    get groupId() {
        return this.getStringAttribute('group_id');
    }
    set groupId(value) {
        this._groupId = value;
    }
    resetGroupId() {
        this._groupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIdInput() {
        return this._groupId;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get identityStoreId() {
        return this.getStringAttribute('identity_store_id');
    }
    set identityStoreId(value) {
        this._identityStoreId = value;
    }
    // Temporarily expose input value. Use with caution.
    get identityStoreIdInput() {
        return this._identityStoreId;
    }
    get filter() {
        return this.interpolationForAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            group_id: cdktf.stringToTerraform(this._groupId),
            identity_store_id: cdktf.stringToTerraform(this._identityStoreId),
            filter: cdktf.listMapper(dataAwsIdentitystoreGroupFilterToTerraform)(this._filter),
        };
    }
}
exports.DataAwsIdentitystoreGroup = DataAwsIdentitystoreGroup;
_a = JSII_RTTI_SYMBOL_1;
DataAwsIdentitystoreGroup[_a] = { fqn: "hashicorp_aws.DataAwsIdentitystoreGroup", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,