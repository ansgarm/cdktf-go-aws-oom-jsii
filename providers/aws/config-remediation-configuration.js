"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigRemediationConfiguration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function configRemediationConfigurationParameterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        resource_value: cdktf.stringToTerraform(struct.resourceValue),
        static_value: cdktf.stringToTerraform(struct.staticValue),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/config_remediation_configuration.html aws_config_remediation_configuration}.
 */
class ConfigRemediationConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/config_remediation_configuration.html aws_config_remediation_configuration} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_config_remediation_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._configRuleName = config.configRuleName;
        this._resourceType = config.resourceType;
        this._targetId = config.targetId;
        this._targetType = config.targetType;
        this._targetVersion = config.targetVersion;
        this._parameter = config.parameter;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get configRuleName() {
        return this.getStringAttribute('config_rule_name');
    }
    set configRuleName(value) {
        this._configRuleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get configRuleNameInput() {
        return this._configRuleName;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    resetResourceType() {
        this._resourceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get targetId() {
        return this.getStringAttribute('target_id');
    }
    set targetId(value) {
        this._targetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetIdInput() {
        return this._targetId;
    }
    get targetType() {
        return this.getStringAttribute('target_type');
    }
    set targetType(value) {
        this._targetType = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetTypeInput() {
        return this._targetType;
    }
    get targetVersion() {
        return this.getStringAttribute('target_version');
    }
    set targetVersion(value) {
        this._targetVersion = value;
    }
    resetTargetVersion() {
        this._targetVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetVersionInput() {
        return this._targetVersion;
    }
    get parameter() {
        return this.interpolationForAttribute('parameter');
    }
    set parameter(value) {
        this._parameter = value;
    }
    resetParameter() {
        this._parameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            config_rule_name: cdktf.stringToTerraform(this._configRuleName),
            resource_type: cdktf.stringToTerraform(this._resourceType),
            target_id: cdktf.stringToTerraform(this._targetId),
            target_type: cdktf.stringToTerraform(this._targetType),
            target_version: cdktf.stringToTerraform(this._targetVersion),
            parameter: cdktf.listMapper(configRemediationConfigurationParameterToTerraform)(this._parameter),
        };
    }
}
exports.ConfigRemediationConfiguration = ConfigRemediationConfiguration;
_a = JSII_RTTI_SYMBOL_1;
ConfigRemediationConfiguration[_a] = { fqn: "hashicorp_aws.ConfigRemediationConfiguration", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,