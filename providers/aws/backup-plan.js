"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupPlan = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function backupPlanAdvancedBackupSettingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        backup_options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.backupOptions),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
    };
}
function backupPlanRuleCopyActionLifecycleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cold_storage_after: cdktf.numberToTerraform(struct.coldStorageAfter),
        delete_after: cdktf.numberToTerraform(struct.deleteAfter),
    };
}
function backupPlanRuleCopyActionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination_vault_arn: cdktf.stringToTerraform(struct.destinationVaultArn),
        lifecycle: cdktf.listMapper(backupPlanRuleCopyActionLifecycleToTerraform)(struct.lifecycle),
    };
}
function backupPlanRuleLifecycleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cold_storage_after: cdktf.numberToTerraform(struct.coldStorageAfter),
        delete_after: cdktf.numberToTerraform(struct.deleteAfter),
    };
}
function backupPlanRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        completion_window: cdktf.numberToTerraform(struct.completionWindow),
        enable_continuous_backup: cdktf.booleanToTerraform(struct.enableContinuousBackup),
        recovery_point_tags: cdktf.hashMapper(cdktf.anyToTerraform)(struct.recoveryPointTags),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        schedule: cdktf.stringToTerraform(struct.schedule),
        start_window: cdktf.numberToTerraform(struct.startWindow),
        target_vault_name: cdktf.stringToTerraform(struct.targetVaultName),
        copy_action: cdktf.listMapper(backupPlanRuleCopyActionToTerraform)(struct.copyAction),
        lifecycle: cdktf.listMapper(backupPlanRuleLifecycleToTerraform)(struct.lifecycle),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/backup_plan.html aws_backup_plan}.
 */
class BackupPlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/backup_plan.html aws_backup_plan} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_backup_plan',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._advancedBackupSetting = config.advancedBackupSetting;
        this._rule = config.rule;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
    get advancedBackupSetting() {
        return this.interpolationForAttribute('advanced_backup_setting');
    }
    set advancedBackupSetting(value) {
        this._advancedBackupSetting = value;
    }
    resetAdvancedBackupSetting() {
        this._advancedBackupSetting = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get advancedBackupSettingInput() {
        return this._advancedBackupSetting;
    }
    get rule() {
        return this.interpolationForAttribute('rule');
    }
    set rule(value) {
        this._rule = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleInput() {
        return this._rule;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            advanced_backup_setting: cdktf.listMapper(backupPlanAdvancedBackupSettingToTerraform)(this._advancedBackupSetting),
            rule: cdktf.listMapper(backupPlanRuleToTerraform)(this._rule),
        };
    }
}
exports.BackupPlan = BackupPlan;
_a = JSII_RTTI_SYMBOL_1;
BackupPlan[_a] = { fqn: "hashicorp_aws.BackupPlan", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,