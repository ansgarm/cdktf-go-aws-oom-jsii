"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3BucketNotification = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function s3BucketNotificationLambdaFunctionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(cdktf.stringToTerraform)(struct.events),
        filter_prefix: cdktf.stringToTerraform(struct.filterPrefix),
        filter_suffix: cdktf.stringToTerraform(struct.filterSuffix),
        id: cdktf.stringToTerraform(struct.id),
        lambda_function_arn: cdktf.stringToTerraform(struct.lambdaFunctionArn),
    };
}
function s3BucketNotificationQueueToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(cdktf.stringToTerraform)(struct.events),
        filter_prefix: cdktf.stringToTerraform(struct.filterPrefix),
        filter_suffix: cdktf.stringToTerraform(struct.filterSuffix),
        id: cdktf.stringToTerraform(struct.id),
        queue_arn: cdktf.stringToTerraform(struct.queueArn),
    };
}
function s3BucketNotificationTopicToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        events: cdktf.listMapper(cdktf.stringToTerraform)(struct.events),
        filter_prefix: cdktf.stringToTerraform(struct.filterPrefix),
        filter_suffix: cdktf.stringToTerraform(struct.filterSuffix),
        id: cdktf.stringToTerraform(struct.id),
        topic_arn: cdktf.stringToTerraform(struct.topicArn),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_notification.html aws_s3_bucket_notification}.
 */
class S3BucketNotification extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_notification.html aws_s3_bucket_notification} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_s3_bucket_notification',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._bucket = config.bucket;
        this._lambdaFunction = config.lambdaFunction;
        this._queue = config.queue;
        this._topic = config.topic;
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get lambdaFunction() {
        return this.interpolationForAttribute('lambda_function');
    }
    set lambdaFunction(value) {
        this._lambdaFunction = value;
    }
    resetLambdaFunction() {
        this._lambdaFunction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaFunctionInput() {
        return this._lambdaFunction;
    }
    get queue() {
        return this.interpolationForAttribute('queue');
    }
    set queue(value) {
        this._queue = value;
    }
    resetQueue() {
        this._queue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queueInput() {
        return this._queue;
    }
    get topic() {
        return this.interpolationForAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    resetTopic() {
        this._topic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket: cdktf.stringToTerraform(this._bucket),
            lambda_function: cdktf.listMapper(s3BucketNotificationLambdaFunctionToTerraform)(this._lambdaFunction),
            queue: cdktf.listMapper(s3BucketNotificationQueueToTerraform)(this._queue),
            topic: cdktf.listMapper(s3BucketNotificationTopicToTerraform)(this._topic),
        };
    }
}
exports.S3BucketNotification = S3BucketNotification;
_a = JSII_RTTI_SYMBOL_1;
S3BucketNotification[_a] = { fqn: "hashicorp_aws.S3BucketNotification", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,