"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscalingplansScalingPlan = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
function autoscalingplansScalingPlanApplicationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudformation_stack_arn: cdktf.stringToTerraform(struct.cloudformationStackArn),
        tag_filter: cdktf.listMapper(autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform)(struct.tagFilter),
    };
}
function autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimensions: cdktf.hashMapper(cdktf.anyToTerraform)(struct.dimensions),
        metric_name: cdktf.stringToTerraform(struct.metricName),
        namespace: cdktf.stringToTerraform(struct.namespace),
        statistic: cdktf.stringToTerraform(struct.statistic),
        unit: cdktf.stringToTerraform(struct.unit),
    };
}
function autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        predefined_load_metric_type: cdktf.stringToTerraform(struct.predefinedLoadMetricType),
        resource_label: cdktf.stringToTerraform(struct.resourceLabel),
    };
}
function autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        dimensions: cdktf.hashMapper(cdktf.anyToTerraform)(struct.dimensions),
        metric_name: cdktf.stringToTerraform(struct.metricName),
        namespace: cdktf.stringToTerraform(struct.namespace),
        statistic: cdktf.stringToTerraform(struct.statistic),
        unit: cdktf.stringToTerraform(struct.unit),
    };
}
function autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        predefined_scaling_metric_type: cdktf.stringToTerraform(struct.predefinedScalingMetricType),
        resource_label: cdktf.stringToTerraform(struct.resourceLabel),
    };
}
function autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_scale_in: cdktf.booleanToTerraform(struct.disableScaleIn),
        estimated_instance_warmup: cdktf.numberToTerraform(struct.estimatedInstanceWarmup),
        scale_in_cooldown: cdktf.numberToTerraform(struct.scaleInCooldown),
        scale_out_cooldown: cdktf.numberToTerraform(struct.scaleOutCooldown),
        target_value: cdktf.numberToTerraform(struct.targetValue),
        customized_scaling_metric_specification: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform)(struct.customizedScalingMetricSpecification),
        predefined_scaling_metric_specification: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform)(struct.predefinedScalingMetricSpecification),
    };
}
function autoscalingplansScalingPlanScalingInstructionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable_dynamic_scaling: cdktf.booleanToTerraform(struct.disableDynamicScaling),
        max_capacity: cdktf.numberToTerraform(struct.maxCapacity),
        min_capacity: cdktf.numberToTerraform(struct.minCapacity),
        predictive_scaling_max_capacity_behavior: cdktf.stringToTerraform(struct.predictiveScalingMaxCapacityBehavior),
        predictive_scaling_max_capacity_buffer: cdktf.numberToTerraform(struct.predictiveScalingMaxCapacityBuffer),
        predictive_scaling_mode: cdktf.stringToTerraform(struct.predictiveScalingMode),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        scalable_dimension: cdktf.stringToTerraform(struct.scalableDimension),
        scaling_policy_update_behavior: cdktf.stringToTerraform(struct.scalingPolicyUpdateBehavior),
        scheduled_action_buffer_time: cdktf.numberToTerraform(struct.scheduledActionBufferTime),
        service_namespace: cdktf.stringToTerraform(struct.serviceNamespace),
        customized_load_metric_specification: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform)(struct.customizedLoadMetricSpecification),
        predefined_load_metric_specification: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform)(struct.predefinedLoadMetricSpecification),
        target_tracking_configuration: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform)(struct.targetTrackingConfiguration),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/autoscalingplans_scaling_plan.html aws_autoscalingplans_scaling_plan}.
 */
class AutoscalingplansScalingPlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/autoscalingplans_scaling_plan.html aws_autoscalingplans_scaling_plan} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_autoscalingplans_scaling_plan',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._applicationSource = config.applicationSource;
        this._scalingInstruction = config.scalingInstruction;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // scaling_plan_version - computed: true, optional: false, required: false
    get scalingPlanVersion() {
        return this.getNumberAttribute('scaling_plan_version');
    }
    get applicationSource() {
        return this.interpolationForAttribute('application_source');
    }
    set applicationSource(value) {
        this._applicationSource = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationSourceInput() {
        return this._applicationSource;
    }
    get scalingInstruction() {
        return this.interpolationForAttribute('scaling_instruction');
    }
    set scalingInstruction(value) {
        this._scalingInstruction = value;
    }
    // Temporarily expose input value. Use with caution.
    get scalingInstructionInput() {
        return this._scalingInstruction;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            application_source: cdktf.listMapper(autoscalingplansScalingPlanApplicationSourceToTerraform)(this._applicationSource),
            scaling_instruction: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionToTerraform)(this._scalingInstruction),
        };
    }
}
exports.AutoscalingplansScalingPlan = AutoscalingplansScalingPlan;
_a = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlan[_a] = { fqn: "hashicorp_aws.AutoscalingplansScalingPlan", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,