"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpsworksUserProfile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/opsworks_user_profile.html aws_opsworks_user_profile}.
 */
class OpsworksUserProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/opsworks_user_profile.html aws_opsworks_user_profile} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_opsworks_user_profile',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._allowSelfManagement = config.allowSelfManagement;
        this._sshPublicKey = config.sshPublicKey;
        this._sshUsername = config.sshUsername;
        this._userArn = config.userArn;
    }
    get allowSelfManagement() {
        return this.getBooleanAttribute('allow_self_management');
    }
    set allowSelfManagement(value) {
        this._allowSelfManagement = value;
    }
    resetAllowSelfManagement() {
        this._allowSelfManagement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowSelfManagementInput() {
        return this._allowSelfManagement;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get sshPublicKey() {
        return this.getStringAttribute('ssh_public_key');
    }
    set sshPublicKey(value) {
        this._sshPublicKey = value;
    }
    resetSshPublicKey() {
        this._sshPublicKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sshPublicKeyInput() {
        return this._sshPublicKey;
    }
    get sshUsername() {
        return this.getStringAttribute('ssh_username');
    }
    set sshUsername(value) {
        this._sshUsername = value;
    }
    // Temporarily expose input value. Use with caution.
    get sshUsernameInput() {
        return this._sshUsername;
    }
    get userArn() {
        return this.getStringAttribute('user_arn');
    }
    set userArn(value) {
        this._userArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get userArnInput() {
        return this._userArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_self_management: cdktf.booleanToTerraform(this._allowSelfManagement),
            ssh_public_key: cdktf.stringToTerraform(this._sshPublicKey),
            ssh_username: cdktf.stringToTerraform(this._sshUsername),
            user_arn: cdktf.stringToTerraform(this._userArn),
        };
    }
}
exports.OpsworksUserProfile = OpsworksUserProfile;
_a = JSII_RTTI_SYMBOL_1;
OpsworksUserProfile[_a] = { fqn: "hashicorp_aws.OpsworksUserProfile", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,