"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerPolicy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function loadBalancerPolicyPolicyAttributeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/load_balancer_policy.html aws_load_balancer_policy}.
 */
class LoadBalancerPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/load_balancer_policy.html aws_load_balancer_policy} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_load_balancer_policy',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._loadBalancerName = config.loadBalancerName;
        this._policyName = config.policyName;
        this._policyTypeName = config.policyTypeName;
        this._policyAttribute = config.policyAttribute;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loadBalancerName() {
        return this.getStringAttribute('load_balancer_name');
    }
    set loadBalancerName(value) {
        this._loadBalancerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerNameInput() {
        return this._loadBalancerName;
    }
    get policyName() {
        return this.getStringAttribute('policy_name');
    }
    set policyName(value) {
        this._policyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyNameInput() {
        return this._policyName;
    }
    get policyTypeName() {
        return this.getStringAttribute('policy_type_name');
    }
    set policyTypeName(value) {
        this._policyTypeName = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyTypeNameInput() {
        return this._policyTypeName;
    }
    get policyAttribute() {
        return this.interpolationForAttribute('policy_attribute');
    }
    set policyAttribute(value) {
        this._policyAttribute = value;
    }
    resetPolicyAttribute() {
        this._policyAttribute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyAttributeInput() {
        return this._policyAttribute;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            load_balancer_name: cdktf.stringToTerraform(this._loadBalancerName),
            policy_name: cdktf.stringToTerraform(this._policyName),
            policy_type_name: cdktf.stringToTerraform(this._policyTypeName),
            policy_attribute: cdktf.listMapper(loadBalancerPolicyPolicyAttributeToTerraform)(this._policyAttribute),
        };
    }
}
exports.LoadBalancerPolicy = LoadBalancerPolicy;
_a = JSII_RTTI_SYMBOL_1;
LoadBalancerPolicy[_a] = { fqn: "hashicorp_aws.LoadBalancerPolicy", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,