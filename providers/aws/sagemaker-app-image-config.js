"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerAppImageConfig = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        default_gid: cdktf.numberToTerraform(struct.defaultGid),
        default_uid: cdktf.numberToTerraform(struct.defaultUid),
        mount_path: cdktf.stringToTerraform(struct.mountPath),
    };
}
function sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        name: cdktf.stringToTerraform(struct.name),
    };
}
function sagemakerAppImageConfigKernelGatewayImageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        file_system_config: cdktf.listMapper(sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform)(struct.fileSystemConfig),
        kernel_spec: cdktf.listMapper(sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform)(struct.kernelSpec),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_app_image_config.html aws_sagemaker_app_image_config}.
 */
class SagemakerAppImageConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_app_image_config.html aws_sagemaker_app_image_config} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_app_image_config',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._appImageConfigName = config.appImageConfigName;
        this._kernelGatewayImageConfig = config.kernelGatewayImageConfig;
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kernelGatewayImageConfig() {
        return this.interpolationForAttribute('kernel_gateway_image_config');
    }
    set kernelGatewayImageConfig(value) {
        this._kernelGatewayImageConfig = value;
    }
    resetKernelGatewayImageConfig() {
        this._kernelGatewayImageConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayImageConfigInput() {
        return this._kernelGatewayImageConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_image_config_name: cdktf.stringToTerraform(this._appImageConfigName),
            kernel_gateway_image_config: cdktf.listMapper(sagemakerAppImageConfigKernelGatewayImageConfigToTerraform)(this._kernelGatewayImageConfig),
        };
    }
}
exports.SagemakerAppImageConfig = SagemakerAppImageConfig;
_a = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfig[_a] = { fqn: "hashicorp_aws.SagemakerAppImageConfig", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,