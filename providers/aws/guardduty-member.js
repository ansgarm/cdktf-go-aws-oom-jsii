"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuarddutyMember = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function guarddutyMemberTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        update: cdktf.stringToTerraform(struct.update),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/guardduty_member.html aws_guardduty_member}.
 */
class GuarddutyMember extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/guardduty_member.html aws_guardduty_member} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_guardduty_member',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._accountId = config.accountId;
        this._detectorId = config.detectorId;
        this._disableEmailNotification = config.disableEmailNotification;
        this._email = config.email;
        this._invitationMessage = config.invitationMessage;
        this._invite = config.invite;
        this._timeouts = config.timeouts;
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    get detectorId() {
        return this.getStringAttribute('detector_id');
    }
    set detectorId(value) {
        this._detectorId = value;
    }
    // Temporarily expose input value. Use with caution.
    get detectorIdInput() {
        return this._detectorId;
    }
    get disableEmailNotification() {
        return this.getBooleanAttribute('disable_email_notification');
    }
    set disableEmailNotification(value) {
        this._disableEmailNotification = value;
    }
    resetDisableEmailNotification() {
        this._disableEmailNotification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableEmailNotificationInput() {
        return this._disableEmailNotification;
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get invitationMessage() {
        return this.getStringAttribute('invitation_message');
    }
    set invitationMessage(value) {
        this._invitationMessage = value;
    }
    resetInvitationMessage() {
        this._invitationMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invitationMessageInput() {
        return this._invitationMessage;
    }
    get invite() {
        return this.getBooleanAttribute('invite');
    }
    set invite(value) {
        this._invite = value;
    }
    resetInvite() {
        this._invite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inviteInput() {
        return this._invite;
    }
    // relationship_status - computed: true, optional: false, required: false
    get relationshipStatus() {
        return this.getStringAttribute('relationship_status');
    }
    get timeouts() {
        return this.interpolationForAttribute('timeouts');
    }
    set timeouts(value) {
        this._timeouts = value;
    }
    resetTimeouts() {
        this._timeouts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account_id: cdktf.stringToTerraform(this._accountId),
            detector_id: cdktf.stringToTerraform(this._detectorId),
            disable_email_notification: cdktf.booleanToTerraform(this._disableEmailNotification),
            email: cdktf.stringToTerraform(this._email),
            invitation_message: cdktf.stringToTerraform(this._invitationMessage),
            invite: cdktf.booleanToTerraform(this._invite),
            timeouts: guarddutyMemberTimeoutsToTerraform(this._timeouts),
        };
    }
}
exports.GuarddutyMember = GuarddutyMember;
_a = JSII_RTTI_SYMBOL_1;
GuarddutyMember[_a] = { fqn: "hashicorp_aws.GuarddutyMember", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,