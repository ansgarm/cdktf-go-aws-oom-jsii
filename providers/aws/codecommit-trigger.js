"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodecommitTrigger = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function codecommitTriggerTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        branches: cdktf.listMapper(cdktf.stringToTerraform)(struct.branches),
        custom_data: cdktf.stringToTerraform(struct.customData),
        destination_arn: cdktf.stringToTerraform(struct.destinationArn),
        events: cdktf.listMapper(cdktf.stringToTerraform)(struct.events),
        name: cdktf.stringToTerraform(struct.name),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/codecommit_trigger.html aws_codecommit_trigger}.
 */
class CodecommitTrigger extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/codecommit_trigger.html aws_codecommit_trigger} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_codecommit_trigger',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._repositoryName = config.repositoryName;
        this._trigger = config.trigger;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // configuration_id - computed: true, optional: false, required: false
    get configurationId() {
        return this.getStringAttribute('configuration_id');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get repositoryName() {
        return this.getStringAttribute('repository_name');
    }
    set repositoryName(value) {
        this._repositoryName = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryNameInput() {
        return this._repositoryName;
    }
    get trigger() {
        return this.interpolationForAttribute('trigger');
    }
    set trigger(value) {
        this._trigger = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            repository_name: cdktf.stringToTerraform(this._repositoryName),
            trigger: cdktf.listMapper(codecommitTriggerTriggerToTerraform)(this._trigger),
        };
    }
}
exports.CodecommitTrigger = CodecommitTrigger;
_a = JSII_RTTI_SYMBOL_1;
CodecommitTrigger[_a] = { fqn: "hashicorp_aws.CodecommitTrigger", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,