"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueConnection = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function glueConnectionPhysicalConnectionRequirementsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        security_group_id_list: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIdList),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/glue_connection.html aws_glue_connection}.
 */
class GlueConnection extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/glue_connection.html aws_glue_connection} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_connection',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._catalogId = config.catalogId;
        this._connectionProperties = config.connectionProperties;
        this._connectionType = config.connectionType;
        this._description = config.description;
        this._matchCriteria = config.matchCriteria;
        this._name = config.name;
        this._physicalConnectionRequirements = config.physicalConnectionRequirements;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get connectionProperties() {
        return this.interpolationForAttribute('connection_properties');
    }
    set connectionProperties(value) {
        this._connectionProperties = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionPropertiesInput() {
        return this._connectionProperties;
    }
    get connectionType() {
        return this.getStringAttribute('connection_type');
    }
    set connectionType(value) {
        this._connectionType = value;
    }
    resetConnectionType() {
        this._connectionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionTypeInput() {
        return this._connectionType;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get matchCriteria() {
        return this.getListAttribute('match_criteria');
    }
    set matchCriteria(value) {
        this._matchCriteria = value;
    }
    resetMatchCriteria() {
        this._matchCriteria = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchCriteriaInput() {
        return this._matchCriteria;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get physicalConnectionRequirements() {
        return this.interpolationForAttribute('physical_connection_requirements');
    }
    set physicalConnectionRequirements(value) {
        this._physicalConnectionRequirements = value;
    }
    resetPhysicalConnectionRequirements() {
        this._physicalConnectionRequirements = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get physicalConnectionRequirementsInput() {
        return this._physicalConnectionRequirements;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            catalog_id: cdktf.stringToTerraform(this._catalogId),
            connection_properties: cdktf.hashMapper(cdktf.anyToTerraform)(this._connectionProperties),
            connection_type: cdktf.stringToTerraform(this._connectionType),
            description: cdktf.stringToTerraform(this._description),
            match_criteria: cdktf.listMapper(cdktf.stringToTerraform)(this._matchCriteria),
            name: cdktf.stringToTerraform(this._name),
            physical_connection_requirements: cdktf.listMapper(glueConnectionPhysicalConnectionRequirementsToTerraform)(this._physicalConnectionRequirements),
        };
    }
}
exports.GlueConnection = GlueConnection;
_a = JSII_RTTI_SYMBOL_1;
GlueConnection[_a] = { fqn: "hashicorp_aws.GlueConnection", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,