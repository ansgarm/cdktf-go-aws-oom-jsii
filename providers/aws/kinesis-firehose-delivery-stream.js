"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisFirehoseDeliveryStream = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
    };
}
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
    };
}
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        cluster_endpoint: cdktf.stringToTerraform(struct.clusterEndpoint),
        domain_arn: cdktf.stringToTerraform(struct.domainArn),
        index_name: cdktf.stringToTerraform(struct.indexName),
        index_rotation_period: cdktf.stringToTerraform(struct.indexRotationPeriod),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        type_name: cdktf.stringToTerraform(struct.typeName),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
        processing_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform)(struct.processingConfiguration),
        vpc_config: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform)(struct.vpcConfig),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        timestamp_formats: cdktf.listMapper(cdktf.stringToTerraform)(struct.timestampFormats),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        case_insensitive: cdktf.booleanToTerraform(struct.caseInsensitive),
        column_to_json_key_mappings: cdktf.hashMapper(cdktf.anyToTerraform)(struct.columnToJsonKeyMappings),
        convert_dots_in_json_keys_to_underscores: cdktf.booleanToTerraform(struct.convertDotsInJsonKeysToUnderscores),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hive_json_ser_de: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform)(struct.hiveJsonSerDe),
        open_x_json_ser_de: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform)(struct.openXJsonSerDe),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        deserializer: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform)(struct.deserializer),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_size_bytes: cdktf.numberToTerraform(struct.blockSizeBytes),
        bloom_filter_columns: cdktf.listMapper(cdktf.stringToTerraform)(struct.bloomFilterColumns),
        bloom_filter_false_positive_probability: cdktf.numberToTerraform(struct.bloomFilterFalsePositiveProbability),
        compression: cdktf.stringToTerraform(struct.compression),
        dictionary_key_threshold: cdktf.numberToTerraform(struct.dictionaryKeyThreshold),
        enable_padding: cdktf.booleanToTerraform(struct.enablePadding),
        format_version: cdktf.stringToTerraform(struct.formatVersion),
        padding_tolerance: cdktf.numberToTerraform(struct.paddingTolerance),
        row_index_stride: cdktf.numberToTerraform(struct.rowIndexStride),
        stripe_size_bytes: cdktf.numberToTerraform(struct.stripeSizeBytes),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        block_size_bytes: cdktf.numberToTerraform(struct.blockSizeBytes),
        compression: cdktf.stringToTerraform(struct.compression),
        enable_dictionary_compression: cdktf.booleanToTerraform(struct.enableDictionaryCompression),
        max_padding_bytes: cdktf.numberToTerraform(struct.maxPaddingBytes),
        page_size_bytes: cdktf.numberToTerraform(struct.pageSizeBytes),
        writer_version: cdktf.stringToTerraform(struct.writerVersion),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        orc_ser_de: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform)(struct.orcSerDe),
        parquet_ser_de: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform)(struct.parquetSerDe),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        serializer: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform)(struct.serializer),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        region: cdktf.stringToTerraform(struct.region),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        version_id: cdktf.stringToTerraform(struct.versionId),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        input_format_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform)(struct.inputFormatConfiguration),
        output_format_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform)(struct.outputFormatConfiguration),
        schema_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform)(struct.schemaConfiguration),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffer_interval: cdktf.numberToTerraform(struct.bufferInterval),
        buffer_size: cdktf.numberToTerraform(struct.bufferSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
    };
}
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffer_interval: cdktf.numberToTerraform(struct.bufferInterval),
        buffer_size: cdktf.numberToTerraform(struct.bufferSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
        data_format_conversion_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform)(struct.dataFormatConversionConfiguration),
        processing_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform)(struct.processingConfiguration),
        s3_backup_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform)(struct.s3BackupConfiguration),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content_encoding: cdktf.stringToTerraform(struct.contentEncoding),
        common_attributes: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform)(struct.commonAttributes),
    };
}
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        access_key: cdktf.stringToTerraform(struct.accessKey),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        name: cdktf.stringToTerraform(struct.name),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        url: cdktf.stringToTerraform(struct.url),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
        processing_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform)(struct.processingConfiguration),
        request_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform)(struct.requestConfiguration),
    };
}
function kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        kinesis_stream_arn: cdktf.stringToTerraform(struct.kinesisStreamArn),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffer_interval: cdktf.numberToTerraform(struct.bufferInterval),
        buffer_size: cdktf.numberToTerraform(struct.bufferSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
    };
}
function kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cluster_jdbcurl: cdktf.stringToTerraform(struct.clusterJdbcurl),
        copy_options: cdktf.stringToTerraform(struct.copyOptions),
        data_table_columns: cdktf.stringToTerraform(struct.dataTableColumns),
        data_table_name: cdktf.stringToTerraform(struct.dataTableName),
        password: cdktf.stringToTerraform(struct.password),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        username: cdktf.stringToTerraform(struct.username),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
        processing_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform)(struct.processingConfiguration),
        s3_backup_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform)(struct.s3BackupConfiguration),
    };
}
function kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffer_interval: cdktf.numberToTerraform(struct.bufferInterval),
        buffer_size: cdktf.numberToTerraform(struct.bufferSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
    };
}
function kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        key_arn: cdktf.stringToTerraform(struct.keyArn),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
function kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform)(struct.parameters),
    };
}
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform)(struct.processors),
    };
}
function kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hec_acknowledgment_timeout: cdktf.numberToTerraform(struct.hecAcknowledgmentTimeout),
        hec_endpoint: cdktf.stringToTerraform(struct.hecEndpoint),
        hec_endpoint_type: cdktf.stringToTerraform(struct.hecEndpointType),
        hec_token: cdktf.stringToTerraform(struct.hecToken),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        cloudwatch_logging_options: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform)(struct.cloudwatchLoggingOptions),
        processing_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform)(struct.processingConfiguration),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/kinesis_firehose_delivery_stream.html aws_kinesis_firehose_delivery_stream}.
 */
class KinesisFirehoseDeliveryStream extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/kinesis_firehose_delivery_stream.html aws_kinesis_firehose_delivery_stream} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_kinesis_firehose_delivery_stream',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._destination = config.destination;
        this._destinationId = config.destinationId;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._versionId = config.versionId;
        this._elasticsearchConfiguration = config.elasticsearchConfiguration;
        this._extendedS3Configuration = config.extendedS3Configuration;
        this._httpEndpointConfiguration = config.httpEndpointConfiguration;
        this._kinesisSourceConfiguration = config.kinesisSourceConfiguration;
        this._redshiftConfiguration = config.redshiftConfiguration;
        this._s3Configuration = config.s3Configuration;
        this._serverSideEncryption = config.serverSideEncryption;
        this._splunkConfiguration = config.splunkConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: true, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
    get destinationId() {
        return this.getStringAttribute('destination_id');
    }
    set destinationId(value) {
        this._destinationId = value;
    }
    resetDestinationId() {
        this._destinationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationIdInput() {
        return this._destinationId;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    set versionId(value) {
        this._versionId = value;
    }
    resetVersionId() {
        this._versionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionIdInput() {
        return this._versionId;
    }
    get elasticsearchConfiguration() {
        return this.interpolationForAttribute('elasticsearch_configuration');
    }
    set elasticsearchConfiguration(value) {
        this._elasticsearchConfiguration = value;
    }
    resetElasticsearchConfiguration() {
        this._elasticsearchConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticsearchConfigurationInput() {
        return this._elasticsearchConfiguration;
    }
    get extendedS3Configuration() {
        return this.interpolationForAttribute('extended_s3_configuration');
    }
    set extendedS3Configuration(value) {
        this._extendedS3Configuration = value;
    }
    resetExtendedS3Configuration() {
        this._extendedS3Configuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extendedS3ConfigurationInput() {
        return this._extendedS3Configuration;
    }
    get httpEndpointConfiguration() {
        return this.interpolationForAttribute('http_endpoint_configuration');
    }
    set httpEndpointConfiguration(value) {
        this._httpEndpointConfiguration = value;
    }
    resetHttpEndpointConfiguration() {
        this._httpEndpointConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpEndpointConfigurationInput() {
        return this._httpEndpointConfiguration;
    }
    get kinesisSourceConfiguration() {
        return this.interpolationForAttribute('kinesis_source_configuration');
    }
    set kinesisSourceConfiguration(value) {
        this._kinesisSourceConfiguration = value;
    }
    resetKinesisSourceConfiguration() {
        this._kinesisSourceConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisSourceConfigurationInput() {
        return this._kinesisSourceConfiguration;
    }
    get redshiftConfiguration() {
        return this.interpolationForAttribute('redshift_configuration');
    }
    set redshiftConfiguration(value) {
        this._redshiftConfiguration = value;
    }
    resetRedshiftConfiguration() {
        this._redshiftConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftConfigurationInput() {
        return this._redshiftConfiguration;
    }
    get s3Configuration() {
        return this.interpolationForAttribute('s3_configuration');
    }
    set s3Configuration(value) {
        this._s3Configuration = value;
    }
    resetS3Configuration() {
        this._s3Configuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration;
    }
    get serverSideEncryption() {
        return this.interpolationForAttribute('server_side_encryption');
    }
    set serverSideEncryption(value) {
        this._serverSideEncryption = value;
    }
    resetServerSideEncryption() {
        this._serverSideEncryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverSideEncryptionInput() {
        return this._serverSideEncryption;
    }
    get splunkConfiguration() {
        return this.interpolationForAttribute('splunk_configuration');
    }
    set splunkConfiguration(value) {
        this._splunkConfiguration = value;
    }
    resetSplunkConfiguration() {
        this._splunkConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get splunkConfigurationInput() {
        return this._splunkConfiguration;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            destination: cdktf.stringToTerraform(this._destination),
            destination_id: cdktf.stringToTerraform(this._destinationId),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            version_id: cdktf.stringToTerraform(this._versionId),
            elasticsearch_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform)(this._elasticsearchConfiguration),
            extended_s3_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform)(this._extendedS3Configuration),
            http_endpoint_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform)(this._httpEndpointConfiguration),
            kinesis_source_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform)(this._kinesisSourceConfiguration),
            redshift_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform)(this._redshiftConfiguration),
            s3_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamS3ConfigurationToTerraform)(this._s3Configuration),
            server_side_encryption: cdktf.listMapper(kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform)(this._serverSideEncryption),
            splunk_configuration: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform)(this._splunkConfiguration),
        };
    }
}
exports.KinesisFirehoseDeliveryStream = KinesisFirehoseDeliveryStream;
_a = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStream[_a] = { fqn: "hashicorp_aws.KinesisFirehoseDeliveryStream", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,