"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsWorkspacesWorkspace = exports.DataAwsWorkspacesWorkspaceWorkspaceProperties = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
class DataAwsWorkspacesWorkspaceWorkspaceProperties extends cdktf.ComplexComputedList {
    // compute_type_name - computed: true, optional: false, required: false
    get computeTypeName() {
        return this.getStringAttribute('compute_type_name');
    }
    // root_volume_size_gib - computed: true, optional: false, required: false
    get rootVolumeSizeGib() {
        return this.getNumberAttribute('root_volume_size_gib');
    }
    // running_mode - computed: true, optional: false, required: false
    get runningMode() {
        return this.getStringAttribute('running_mode');
    }
    // running_mode_auto_stop_timeout_in_minutes - computed: true, optional: false, required: false
    get runningModeAutoStopTimeoutInMinutes() {
        return this.getNumberAttribute('running_mode_auto_stop_timeout_in_minutes');
    }
    // user_volume_size_gib - computed: true, optional: false, required: false
    get userVolumeSizeGib() {
        return this.getNumberAttribute('user_volume_size_gib');
    }
}
exports.DataAwsWorkspacesWorkspaceWorkspaceProperties = DataAwsWorkspacesWorkspaceWorkspaceProperties;
_a = JSII_RTTI_SYMBOL_1;
DataAwsWorkspacesWorkspaceWorkspaceProperties[_a] = { fqn: "hashicorp_aws.DataAwsWorkspacesWorkspaceWorkspaceProperties", version: "0.0.0" };
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/workspaces_workspace.html aws_workspaces_workspace}.
 */
class DataAwsWorkspacesWorkspace extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/workspaces_workspace.html aws_workspaces_workspace} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_workspaces_workspace',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._directoryId = config.directoryId;
        this._tags = config.tags;
        this._userName = config.userName;
        this._workspaceId = config.workspaceId;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // bundle_id - computed: true, optional: false, required: false
    get bundleId() {
        return this.getStringAttribute('bundle_id');
    }
    // computer_name - computed: true, optional: false, required: false
    get computerName() {
        return this.getStringAttribute('computer_name');
    }
    get directoryId() {
        return this.getStringAttribute('directory_id');
    }
    set directoryId(value) {
        this._directoryId = value;
    }
    resetDirectoryId() {
        this._directoryId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directoryIdInput() {
        return this._directoryId;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // ip_address - computed: true, optional: false, required: false
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    // root_volume_encryption_enabled - computed: true, optional: false, required: false
    get rootVolumeEncryptionEnabled() {
        return this.getBooleanAttribute('root_volume_encryption_enabled');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get tags() {
        return this.interpolationForAttribute('tags'); // Getting the computed value is not yet implemented
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get userName() {
        return this.getStringAttribute('user_name');
    }
    set userName(value) {
        this._userName = value;
    }
    resetUserName() {
        this._userName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userNameInput() {
        return this._userName;
    }
    // user_volume_encryption_enabled - computed: true, optional: false, required: false
    get userVolumeEncryptionEnabled() {
        return this.getBooleanAttribute('user_volume_encryption_enabled');
    }
    // volume_encryption_key - computed: true, optional: false, required: false
    get volumeEncryptionKey() {
        return this.getStringAttribute('volume_encryption_key');
    }
    get workspaceId() {
        return this.getStringAttribute('workspace_id');
    }
    set workspaceId(value) {
        this._workspaceId = value;
    }
    resetWorkspaceId() {
        this._workspaceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceIdInput() {
        return this._workspaceId;
    }
    // workspace_properties - computed: true, optional: false, required: false
    workspaceProperties(index) {
        return new DataAwsWorkspacesWorkspaceWorkspaceProperties(this, 'workspace_properties', index);
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            directory_id: cdktf.stringToTerraform(this._directoryId),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            user_name: cdktf.stringToTerraform(this._userName),
            workspace_id: cdktf.stringToTerraform(this._workspaceId),
        };
    }
}
exports.DataAwsWorkspacesWorkspace = DataAwsWorkspacesWorkspace;
_b = JSII_RTTI_SYMBOL_1;
DataAwsWorkspacesWorkspace[_b] = { fqn: "hashicorp_aws.DataAwsWorkspacesWorkspace", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,