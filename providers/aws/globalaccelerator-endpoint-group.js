"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalacceleratorEndpointGroup = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function globalacceleratorEndpointGroupEndpointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_ip_preservation_enabled: cdktf.booleanToTerraform(struct.clientIpPreservationEnabled),
        endpoint_id: cdktf.stringToTerraform(struct.endpointId),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
function globalacceleratorEndpointGroupPortOverrideToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        endpoint_port: cdktf.numberToTerraform(struct.endpointPort),
        listener_port: cdktf.numberToTerraform(struct.listenerPort),
    };
}
function globalacceleratorEndpointGroupTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/globalaccelerator_endpoint_group.html aws_globalaccelerator_endpoint_group}.
 */
class GlobalacceleratorEndpointGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/globalaccelerator_endpoint_group.html aws_globalaccelerator_endpoint_group} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_globalaccelerator_endpoint_group',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._endpointGroupRegion = config.endpointGroupRegion;
        this._healthCheckIntervalSeconds = config.healthCheckIntervalSeconds;
        this._healthCheckPath = config.healthCheckPath;
        this._healthCheckPort = config.healthCheckPort;
        this._healthCheckProtocol = config.healthCheckProtocol;
        this._listenerArn = config.listenerArn;
        this._thresholdCount = config.thresholdCount;
        this._trafficDialPercentage = config.trafficDialPercentage;
        this._endpointConfiguration = config.endpointConfiguration;
        this._portOverride = config.portOverride;
        this._timeouts = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get endpointGroupRegion() {
        return this.getStringAttribute('endpoint_group_region');
    }
    set endpointGroupRegion(value) {
        this._endpointGroupRegion = value;
    }
    resetEndpointGroupRegion() {
        this._endpointGroupRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointGroupRegionInput() {
        return this._endpointGroupRegion;
    }
    get healthCheckIntervalSeconds() {
        return this.getNumberAttribute('health_check_interval_seconds');
    }
    set healthCheckIntervalSeconds(value) {
        this._healthCheckIntervalSeconds = value;
    }
    resetHealthCheckIntervalSeconds() {
        this._healthCheckIntervalSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckIntervalSecondsInput() {
        return this._healthCheckIntervalSeconds;
    }
    get healthCheckPath() {
        return this.getStringAttribute('health_check_path');
    }
    set healthCheckPath(value) {
        this._healthCheckPath = value;
    }
    resetHealthCheckPath() {
        this._healthCheckPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckPathInput() {
        return this._healthCheckPath;
    }
    get healthCheckPort() {
        return this.getNumberAttribute('health_check_port');
    }
    set healthCheckPort(value) {
        this._healthCheckPort = value;
    }
    resetHealthCheckPort() {
        this._healthCheckPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckPortInput() {
        return this._healthCheckPort;
    }
    get healthCheckProtocol() {
        return this.getStringAttribute('health_check_protocol');
    }
    set healthCheckProtocol(value) {
        this._healthCheckProtocol = value;
    }
    resetHealthCheckProtocol() {
        this._healthCheckProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckProtocolInput() {
        return this._healthCheckProtocol;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get listenerArn() {
        return this.getStringAttribute('listener_arn');
    }
    set listenerArn(value) {
        this._listenerArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get listenerArnInput() {
        return this._listenerArn;
    }
    get thresholdCount() {
        return this.getNumberAttribute('threshold_count');
    }
    set thresholdCount(value) {
        this._thresholdCount = value;
    }
    resetThresholdCount() {
        this._thresholdCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdCountInput() {
        return this._thresholdCount;
    }
    get trafficDialPercentage() {
        return this.getNumberAttribute('traffic_dial_percentage');
    }
    set trafficDialPercentage(value) {
        this._trafficDialPercentage = value;
    }
    resetTrafficDialPercentage() {
        this._trafficDialPercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trafficDialPercentageInput() {
        return this._trafficDialPercentage;
    }
    get endpointConfiguration() {
        return this.interpolationForAttribute('endpoint_configuration');
    }
    set endpointConfiguration(value) {
        this._endpointConfiguration = value;
    }
    resetEndpointConfiguration() {
        this._endpointConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointConfigurationInput() {
        return this._endpointConfiguration;
    }
    get portOverride() {
        return this.interpolationForAttribute('port_override');
    }
    set portOverride(value) {
        this._portOverride = value;
    }
    resetPortOverride() {
        this._portOverride = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portOverrideInput() {
        return this._portOverride;
    }
    get timeouts() {
        return this.interpolationForAttribute('timeouts');
    }
    set timeouts(value) {
        this._timeouts = value;
    }
    resetTimeouts() {
        this._timeouts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            endpoint_group_region: cdktf.stringToTerraform(this._endpointGroupRegion),
            health_check_interval_seconds: cdktf.numberToTerraform(this._healthCheckIntervalSeconds),
            health_check_path: cdktf.stringToTerraform(this._healthCheckPath),
            health_check_port: cdktf.numberToTerraform(this._healthCheckPort),
            health_check_protocol: cdktf.stringToTerraform(this._healthCheckProtocol),
            listener_arn: cdktf.stringToTerraform(this._listenerArn),
            threshold_count: cdktf.numberToTerraform(this._thresholdCount),
            traffic_dial_percentage: cdktf.numberToTerraform(this._trafficDialPercentage),
            endpoint_configuration: cdktf.listMapper(globalacceleratorEndpointGroupEndpointConfigurationToTerraform)(this._endpointConfiguration),
            port_override: cdktf.listMapper(globalacceleratorEndpointGroupPortOverrideToTerraform)(this._portOverride),
            timeouts: globalacceleratorEndpointGroupTimeoutsToTerraform(this._timeouts),
        };
    }
}
exports.GlobalacceleratorEndpointGroup = GlobalacceleratorEndpointGroup;
_a = JSII_RTTI_SYMBOL_1;
GlobalacceleratorEndpointGroup[_a] = { fqn: "hashicorp_aws.GlobalacceleratorEndpointGroup", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,