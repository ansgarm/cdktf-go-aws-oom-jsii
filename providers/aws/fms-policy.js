"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FmsPolicy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function fmsPolicyExcludeMapToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account: cdktf.listMapper(cdktf.stringToTerraform)(struct.account),
        orgunit: cdktf.listMapper(cdktf.stringToTerraform)(struct.orgunit),
    };
}
function fmsPolicyIncludeMapToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        account: cdktf.listMapper(cdktf.stringToTerraform)(struct.account),
        orgunit: cdktf.listMapper(cdktf.stringToTerraform)(struct.orgunit),
    };
}
function fmsPolicySecurityServicePolicyDataToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        managed_service_data: cdktf.stringToTerraform(struct.managedServiceData),
        type: cdktf.stringToTerraform(struct.type),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/fms_policy.html aws_fms_policy}.
 */
class FmsPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/fms_policy.html aws_fms_policy} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_fms_policy',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._deleteAllPolicyResources = config.deleteAllPolicyResources;
        this._excludeResourceTags = config.excludeResourceTags;
        this._name = config.name;
        this._remediationEnabled = config.remediationEnabled;
        this._resourceTags = config.resourceTags;
        this._resourceType = config.resourceType;
        this._resourceTypeList = config.resourceTypeList;
        this._excludeMap = config.excludeMap;
        this._includeMap = config.includeMap;
        this._securityServicePolicyData = config.securityServicePolicyData;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get deleteAllPolicyResources() {
        return this.getBooleanAttribute('delete_all_policy_resources');
    }
    set deleteAllPolicyResources(value) {
        this._deleteAllPolicyResources = value;
    }
    resetDeleteAllPolicyResources() {
        this._deleteAllPolicyResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteAllPolicyResourcesInput() {
        return this._deleteAllPolicyResources;
    }
    get excludeResourceTags() {
        return this.getBooleanAttribute('exclude_resource_tags');
    }
    set excludeResourceTags(value) {
        this._excludeResourceTags = value;
    }
    // Temporarily expose input value. Use with caution.
    get excludeResourceTagsInput() {
        return this._excludeResourceTags;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // policy_update_token - computed: true, optional: false, required: false
    get policyUpdateToken() {
        return this.getStringAttribute('policy_update_token');
    }
    get remediationEnabled() {
        return this.getBooleanAttribute('remediation_enabled');
    }
    set remediationEnabled(value) {
        this._remediationEnabled = value;
    }
    resetRemediationEnabled() {
        this._remediationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remediationEnabledInput() {
        return this._remediationEnabled;
    }
    get resourceTags() {
        return this.interpolationForAttribute('resource_tags');
    }
    set resourceTags(value) {
        this._resourceTags = value;
    }
    resetResourceTags() {
        this._resourceTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTagsInput() {
        return this._resourceTags;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    resetResourceType() {
        this._resourceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get resourceTypeList() {
        return this.getListAttribute('resource_type_list');
    }
    set resourceTypeList(value) {
        this._resourceTypeList = value;
    }
    resetResourceTypeList() {
        this._resourceTypeList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeListInput() {
        return this._resourceTypeList;
    }
    get excludeMap() {
        return this.interpolationForAttribute('exclude_map');
    }
    set excludeMap(value) {
        this._excludeMap = value;
    }
    resetExcludeMap() {
        this._excludeMap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeMapInput() {
        return this._excludeMap;
    }
    get includeMap() {
        return this.interpolationForAttribute('include_map');
    }
    set includeMap(value) {
        this._includeMap = value;
    }
    resetIncludeMap() {
        this._includeMap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeMapInput() {
        return this._includeMap;
    }
    get securityServicePolicyData() {
        return this.interpolationForAttribute('security_service_policy_data');
    }
    set securityServicePolicyData(value) {
        this._securityServicePolicyData = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityServicePolicyDataInput() {
        return this._securityServicePolicyData;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            delete_all_policy_resources: cdktf.booleanToTerraform(this._deleteAllPolicyResources),
            exclude_resource_tags: cdktf.booleanToTerraform(this._excludeResourceTags),
            name: cdktf.stringToTerraform(this._name),
            remediation_enabled: cdktf.booleanToTerraform(this._remediationEnabled),
            resource_tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._resourceTags),
            resource_type: cdktf.stringToTerraform(this._resourceType),
            resource_type_list: cdktf.listMapper(cdktf.stringToTerraform)(this._resourceTypeList),
            exclude_map: cdktf.listMapper(fmsPolicyExcludeMapToTerraform)(this._excludeMap),
            include_map: cdktf.listMapper(fmsPolicyIncludeMapToTerraform)(this._includeMap),
            security_service_policy_data: cdktf.listMapper(fmsPolicySecurityServicePolicyDataToTerraform)(this._securityServicePolicyData),
        };
    }
}
exports.FmsPolicy = FmsPolicy;
_a = JSII_RTTI_SYMBOL_1;
FmsPolicy[_a] = { fqn: "hashicorp_aws.FmsPolicy", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,