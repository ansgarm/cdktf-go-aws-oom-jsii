"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaCodeSigningConfig = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lambdaCodeSigningConfigAllowedPublishersToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        signing_profile_version_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.signingProfileVersionArns),
    };
}
function lambdaCodeSigningConfigPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        untrusted_artifact_on_deployment: cdktf.stringToTerraform(struct.untrustedArtifactOnDeployment),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/lambda_code_signing_config.html aws_lambda_code_signing_config}.
 */
class LambdaCodeSigningConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/lambda_code_signing_config.html aws_lambda_code_signing_config} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_lambda_code_signing_config',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._description = config.description;
        this._allowedPublishers = config.allowedPublishers;
        this._policies = config.policies;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // config_id - computed: true, optional: false, required: false
    get configId() {
        return this.getStringAttribute('config_id');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // last_modified - computed: true, optional: false, required: false
    get lastModified() {
        return this.getStringAttribute('last_modified');
    }
    get allowedPublishers() {
        return this.interpolationForAttribute('allowed_publishers');
    }
    set allowedPublishers(value) {
        this._allowedPublishers = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedPublishersInput() {
        return this._allowedPublishers;
    }
    get policies() {
        return this.interpolationForAttribute('policies');
    }
    set policies(value) {
        this._policies = value;
    }
    resetPolicies() {
        this._policies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policiesInput() {
        return this._policies;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            allowed_publishers: cdktf.listMapper(lambdaCodeSigningConfigAllowedPublishersToTerraform)(this._allowedPublishers),
            policies: cdktf.listMapper(lambdaCodeSigningConfigPoliciesToTerraform)(this._policies),
        };
    }
}
exports.LambdaCodeSigningConfig = LambdaCodeSigningConfig;
_a = JSII_RTTI_SYMBOL_1;
LambdaCodeSigningConfig[_a] = { fqn: "hashicorp_aws.LambdaCodeSigningConfig", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,