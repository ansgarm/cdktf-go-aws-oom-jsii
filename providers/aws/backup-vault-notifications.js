"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupVaultNotifications = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/backup_vault_notifications.html aws_backup_vault_notifications}.
 */
class BackupVaultNotifications extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/backup_vault_notifications.html aws_backup_vault_notifications} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_backup_vault_notifications',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._backupVaultEvents = config.backupVaultEvents;
        this._backupVaultName = config.backupVaultName;
        this._snsTopicArn = config.snsTopicArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // backup_vault_arn - computed: true, optional: false, required: false
    get backupVaultArn() {
        return this.getStringAttribute('backup_vault_arn');
    }
    get backupVaultEvents() {
        return this.getListAttribute('backup_vault_events');
    }
    set backupVaultEvents(value) {
        this._backupVaultEvents = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupVaultEventsInput() {
        return this._backupVaultEvents;
    }
    get backupVaultName() {
        return this.getStringAttribute('backup_vault_name');
    }
    set backupVaultName(value) {
        this._backupVaultName = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupVaultNameInput() {
        return this._backupVaultName;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get snsTopicArn() {
        return this.getStringAttribute('sns_topic_arn');
    }
    set snsTopicArn(value) {
        this._snsTopicArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get snsTopicArnInput() {
        return this._snsTopicArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            backup_vault_events: cdktf.listMapper(cdktf.stringToTerraform)(this._backupVaultEvents),
            backup_vault_name: cdktf.stringToTerraform(this._backupVaultName),
            sns_topic_arn: cdktf.stringToTerraform(this._snsTopicArn),
        };
    }
}
exports.BackupVaultNotifications = BackupVaultNotifications;
_a = JSII_RTTI_SYMBOL_1;
BackupVaultNotifications[_a] = { fqn: "hashicorp_aws.BackupVaultNotifications", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,