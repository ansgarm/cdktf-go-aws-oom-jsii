"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferServer = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function transferServerEndpointDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address_allocation_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.addressAllocationIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnetIds),
        vpc_endpoint_id: cdktf.stringToTerraform(struct.vpcEndpointId),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/transfer_server.html aws_transfer_server}.
 */
class TransferServer extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/transfer_server.html aws_transfer_server} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_transfer_server',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._certificate = config.certificate;
        this._endpointType = config.endpointType;
        this._forceDestroy = config.forceDestroy;
        this._hostKey = config.hostKey;
        this._identityProviderType = config.identityProviderType;
        this._invocationRole = config.invocationRole;
        this._loggingRole = config.loggingRole;
        this._protocols = config.protocols;
        this._securityPolicyName = config.securityPolicyName;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._url = config.url;
        this._endpointDetails = config.endpointDetails;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get certificate() {
        return this.getStringAttribute('certificate');
    }
    set certificate(value) {
        this._certificate = value;
    }
    resetCertificate() {
        this._certificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateInput() {
        return this._certificate;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    get endpointType() {
        return this.getStringAttribute('endpoint_type');
    }
    set endpointType(value) {
        this._endpointType = value;
    }
    resetEndpointType() {
        this._endpointType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointTypeInput() {
        return this._endpointType;
    }
    get forceDestroy() {
        return this.getBooleanAttribute('force_destroy');
    }
    set forceDestroy(value) {
        this._forceDestroy = value;
    }
    resetForceDestroy() {
        this._forceDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDestroyInput() {
        return this._forceDestroy;
    }
    get hostKey() {
        return this.getStringAttribute('host_key');
    }
    set hostKey(value) {
        this._hostKey = value;
    }
    resetHostKey() {
        this._hostKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostKeyInput() {
        return this._hostKey;
    }
    // host_key_fingerprint - computed: true, optional: false, required: false
    get hostKeyFingerprint() {
        return this.getStringAttribute('host_key_fingerprint');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get identityProviderType() {
        return this.getStringAttribute('identity_provider_type');
    }
    set identityProviderType(value) {
        this._identityProviderType = value;
    }
    resetIdentityProviderType() {
        this._identityProviderType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityProviderTypeInput() {
        return this._identityProviderType;
    }
    get invocationRole() {
        return this.getStringAttribute('invocation_role');
    }
    set invocationRole(value) {
        this._invocationRole = value;
    }
    resetInvocationRole() {
        this._invocationRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invocationRoleInput() {
        return this._invocationRole;
    }
    get loggingRole() {
        return this.getStringAttribute('logging_role');
    }
    set loggingRole(value) {
        this._loggingRole = value;
    }
    resetLoggingRole() {
        this._loggingRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingRoleInput() {
        return this._loggingRole;
    }
    get protocols() {
        return this.getListAttribute('protocols');
    }
    set protocols(value) {
        this._protocols = value;
    }
    resetProtocols() {
        this._protocols = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolsInput() {
        return this._protocols;
    }
    get securityPolicyName() {
        return this.getStringAttribute('security_policy_name');
    }
    set securityPolicyName(value) {
        this._securityPolicyName = value;
    }
    resetSecurityPolicyName() {
        this._securityPolicyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityPolicyNameInput() {
        return this._securityPolicyName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get endpointDetails() {
        return this.interpolationForAttribute('endpoint_details');
    }
    set endpointDetails(value) {
        this._endpointDetails = value;
    }
    resetEndpointDetails() {
        this._endpointDetails = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointDetailsInput() {
        return this._endpointDetails;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            certificate: cdktf.stringToTerraform(this._certificate),
            endpoint_type: cdktf.stringToTerraform(this._endpointType),
            force_destroy: cdktf.booleanToTerraform(this._forceDestroy),
            host_key: cdktf.stringToTerraform(this._hostKey),
            identity_provider_type: cdktf.stringToTerraform(this._identityProviderType),
            invocation_role: cdktf.stringToTerraform(this._invocationRole),
            logging_role: cdktf.stringToTerraform(this._loggingRole),
            protocols: cdktf.listMapper(cdktf.stringToTerraform)(this._protocols),
            security_policy_name: cdktf.stringToTerraform(this._securityPolicyName),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            url: cdktf.stringToTerraform(this._url),
            endpoint_details: cdktf.listMapper(transferServerEndpointDetailsToTerraform)(this._endpointDetails),
        };
    }
}
exports.TransferServer = TransferServer;
_a = JSII_RTTI_SYMBOL_1;
TransferServer[_a] = { fqn: "hashicorp_aws.TransferServer", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,