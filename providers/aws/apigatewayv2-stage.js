"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Apigatewayv2Stage = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function apigatewayv2StageAccessLogSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        destination_arn: cdktf.stringToTerraform(struct.destinationArn),
        format: cdktf.stringToTerraform(struct.format),
    };
}
function apigatewayv2StageDefaultRouteSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_trace_enabled: cdktf.booleanToTerraform(struct.dataTraceEnabled),
        detailed_metrics_enabled: cdktf.booleanToTerraform(struct.detailedMetricsEnabled),
        logging_level: cdktf.stringToTerraform(struct.loggingLevel),
        throttling_burst_limit: cdktf.numberToTerraform(struct.throttlingBurstLimit),
        throttling_rate_limit: cdktf.numberToTerraform(struct.throttlingRateLimit),
    };
}
function apigatewayv2StageRouteSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        data_trace_enabled: cdktf.booleanToTerraform(struct.dataTraceEnabled),
        detailed_metrics_enabled: cdktf.booleanToTerraform(struct.detailedMetricsEnabled),
        logging_level: cdktf.stringToTerraform(struct.loggingLevel),
        route_key: cdktf.stringToTerraform(struct.routeKey),
        throttling_burst_limit: cdktf.numberToTerraform(struct.throttlingBurstLimit),
        throttling_rate_limit: cdktf.numberToTerraform(struct.throttlingRateLimit),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/apigatewayv2_stage.html aws_apigatewayv2_stage}.
 */
class Apigatewayv2Stage extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/apigatewayv2_stage.html aws_apigatewayv2_stage} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_apigatewayv2_stage',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._apiId = config.apiId;
        this._autoDeploy = config.autoDeploy;
        this._clientCertificateId = config.clientCertificateId;
        this._deploymentId = config.deploymentId;
        this._description = config.description;
        this._name = config.name;
        this._stageVariables = config.stageVariables;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._accessLogSettings = config.accessLogSettings;
        this._defaultRouteSettings = config.defaultRouteSettings;
        this._routeSettings = config.routeSettings;
    }
    get apiId() {
        return this.getStringAttribute('api_id');
    }
    set apiId(value) {
        this._apiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiIdInput() {
        return this._apiId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoDeploy() {
        return this.getBooleanAttribute('auto_deploy');
    }
    set autoDeploy(value) {
        this._autoDeploy = value;
    }
    resetAutoDeploy() {
        this._autoDeploy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeployInput() {
        return this._autoDeploy;
    }
    get clientCertificateId() {
        return this.getStringAttribute('client_certificate_id');
    }
    set clientCertificateId(value) {
        this._clientCertificateId = value;
    }
    resetClientCertificateId() {
        this._clientCertificateId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateIdInput() {
        return this._clientCertificateId;
    }
    get deploymentId() {
        return this.getStringAttribute('deployment_id');
    }
    set deploymentId(value) {
        this._deploymentId = value;
    }
    resetDeploymentId() {
        this._deploymentId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentIdInput() {
        return this._deploymentId;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // execution_arn - computed: true, optional: false, required: false
    get executionArn() {
        return this.getStringAttribute('execution_arn');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // invoke_url - computed: true, optional: false, required: false
    get invokeUrl() {
        return this.getStringAttribute('invoke_url');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get stageVariables() {
        return this.interpolationForAttribute('stage_variables');
    }
    set stageVariables(value) {
        this._stageVariables = value;
    }
    resetStageVariables() {
        this._stageVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stageVariablesInput() {
        return this._stageVariables;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get accessLogSettings() {
        return this.interpolationForAttribute('access_log_settings');
    }
    set accessLogSettings(value) {
        this._accessLogSettings = value;
    }
    resetAccessLogSettings() {
        this._accessLogSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLogSettingsInput() {
        return this._accessLogSettings;
    }
    get defaultRouteSettings() {
        return this.interpolationForAttribute('default_route_settings');
    }
    set defaultRouteSettings(value) {
        this._defaultRouteSettings = value;
    }
    resetDefaultRouteSettings() {
        this._defaultRouteSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteSettingsInput() {
        return this._defaultRouteSettings;
    }
    get routeSettings() {
        return this.interpolationForAttribute('route_settings');
    }
    set routeSettings(value) {
        this._routeSettings = value;
    }
    resetRouteSettings() {
        this._routeSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeSettingsInput() {
        return this._routeSettings;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_id: cdktf.stringToTerraform(this._apiId),
            auto_deploy: cdktf.booleanToTerraform(this._autoDeploy),
            client_certificate_id: cdktf.stringToTerraform(this._clientCertificateId),
            deployment_id: cdktf.stringToTerraform(this._deploymentId),
            description: cdktf.stringToTerraform(this._description),
            name: cdktf.stringToTerraform(this._name),
            stage_variables: cdktf.hashMapper(cdktf.anyToTerraform)(this._stageVariables),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            access_log_settings: cdktf.listMapper(apigatewayv2StageAccessLogSettingsToTerraform)(this._accessLogSettings),
            default_route_settings: cdktf.listMapper(apigatewayv2StageDefaultRouteSettingsToTerraform)(this._defaultRouteSettings),
            route_settings: cdktf.listMapper(apigatewayv2StageRouteSettingsToTerraform)(this._routeSettings),
        };
    }
}
exports.Apigatewayv2Stage = Apigatewayv2Stage;
_a = JSII_RTTI_SYMBOL_1;
Apigatewayv2Stage[_a] = { fqn: "hashicorp_aws.Apigatewayv2Stage", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,