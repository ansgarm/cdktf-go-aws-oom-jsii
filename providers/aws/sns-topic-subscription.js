"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnsTopicSubscription = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/sns_topic_subscription.html aws_sns_topic_subscription}.
 */
class SnsTopicSubscription extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sns_topic_subscription.html aws_sns_topic_subscription} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sns_topic_subscription',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._confirmationTimeoutInMinutes = config.confirmationTimeoutInMinutes;
        this._deliveryPolicy = config.deliveryPolicy;
        this._endpoint = config.endpoint;
        this._endpointAutoConfirms = config.endpointAutoConfirms;
        this._filterPolicy = config.filterPolicy;
        this._protocol = config.protocol;
        this._rawMessageDelivery = config.rawMessageDelivery;
        this._redrivePolicy = config.redrivePolicy;
        this._subscriptionRoleArn = config.subscriptionRoleArn;
        this._topicArn = config.topicArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get confirmationTimeoutInMinutes() {
        return this.getNumberAttribute('confirmation_timeout_in_minutes');
    }
    set confirmationTimeoutInMinutes(value) {
        this._confirmationTimeoutInMinutes = value;
    }
    resetConfirmationTimeoutInMinutes() {
        this._confirmationTimeoutInMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confirmationTimeoutInMinutesInput() {
        return this._confirmationTimeoutInMinutes;
    }
    // confirmation_was_authenticated - computed: true, optional: false, required: false
    get confirmationWasAuthenticated() {
        return this.getBooleanAttribute('confirmation_was_authenticated');
    }
    get deliveryPolicy() {
        return this.getStringAttribute('delivery_policy');
    }
    set deliveryPolicy(value) {
        this._deliveryPolicy = value;
    }
    resetDeliveryPolicy() {
        this._deliveryPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryPolicyInput() {
        return this._deliveryPolicy;
    }
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    set endpoint(value) {
        this._endpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointInput() {
        return this._endpoint;
    }
    get endpointAutoConfirms() {
        return this.getBooleanAttribute('endpoint_auto_confirms');
    }
    set endpointAutoConfirms(value) {
        this._endpointAutoConfirms = value;
    }
    resetEndpointAutoConfirms() {
        this._endpointAutoConfirms = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointAutoConfirmsInput() {
        return this._endpointAutoConfirms;
    }
    get filterPolicy() {
        return this.getStringAttribute('filter_policy');
    }
    set filterPolicy(value) {
        this._filterPolicy = value;
    }
    resetFilterPolicy() {
        this._filterPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterPolicyInput() {
        return this._filterPolicy;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    // pending_confirmation - computed: true, optional: false, required: false
    get pendingConfirmation() {
        return this.getBooleanAttribute('pending_confirmation');
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get rawMessageDelivery() {
        return this.getBooleanAttribute('raw_message_delivery');
    }
    set rawMessageDelivery(value) {
        this._rawMessageDelivery = value;
    }
    resetRawMessageDelivery() {
        this._rawMessageDelivery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawMessageDeliveryInput() {
        return this._rawMessageDelivery;
    }
    get redrivePolicy() {
        return this.getStringAttribute('redrive_policy');
    }
    set redrivePolicy(value) {
        this._redrivePolicy = value;
    }
    resetRedrivePolicy() {
        this._redrivePolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redrivePolicyInput() {
        return this._redrivePolicy;
    }
    get subscriptionRoleArn() {
        return this.getStringAttribute('subscription_role_arn');
    }
    set subscriptionRoleArn(value) {
        this._subscriptionRoleArn = value;
    }
    resetSubscriptionRoleArn() {
        this._subscriptionRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subscriptionRoleArnInput() {
        return this._subscriptionRoleArn;
    }
    get topicArn() {
        return this.getStringAttribute('topic_arn');
    }
    set topicArn(value) {
        this._topicArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicArnInput() {
        return this._topicArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            confirmation_timeout_in_minutes: cdktf.numberToTerraform(this._confirmationTimeoutInMinutes),
            delivery_policy: cdktf.stringToTerraform(this._deliveryPolicy),
            endpoint: cdktf.stringToTerraform(this._endpoint),
            endpoint_auto_confirms: cdktf.booleanToTerraform(this._endpointAutoConfirms),
            filter_policy: cdktf.stringToTerraform(this._filterPolicy),
            protocol: cdktf.stringToTerraform(this._protocol),
            raw_message_delivery: cdktf.booleanToTerraform(this._rawMessageDelivery),
            redrive_policy: cdktf.stringToTerraform(this._redrivePolicy),
            subscription_role_arn: cdktf.stringToTerraform(this._subscriptionRoleArn),
            topic_arn: cdktf.stringToTerraform(this._topicArn),
        };
    }
}
exports.SnsTopicSubscription = SnsTopicSubscription;
_a = JSII_RTTI_SYMBOL_1;
SnsTopicSubscription[_a] = { fqn: "hashicorp_aws.SnsTopicSubscription", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,