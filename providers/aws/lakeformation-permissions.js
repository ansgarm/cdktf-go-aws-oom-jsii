"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LakeformationPermissions = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lakeformationPermissionsDataLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
    };
}
function lakeformationPermissionsDatabaseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        name: cdktf.stringToTerraform(struct.name),
    };
}
function lakeformationPermissionsTableToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        name: cdktf.stringToTerraform(struct.name),
        wildcard: cdktf.booleanToTerraform(struct.wildcard),
    };
}
function lakeformationPermissionsTableWithColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        column_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.columnNames),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        excluded_column_names: cdktf.listMapper(cdktf.stringToTerraform)(struct.excludedColumnNames),
        name: cdktf.stringToTerraform(struct.name),
        wildcard: cdktf.booleanToTerraform(struct.wildcard),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/lakeformation_permissions.html aws_lakeformation_permissions}.
 */
class LakeformationPermissions extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/lakeformation_permissions.html aws_lakeformation_permissions} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_lakeformation_permissions',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._catalogId = config.catalogId;
        this._catalogResource = config.catalogResource;
        this._permissions = config.permissions;
        this._permissionsWithGrantOption = config.permissionsWithGrantOption;
        this._principal = config.principal;
        this._dataLocation = config.dataLocation;
        this._database = config.database;
        this._table = config.table;
        this._tableWithColumns = config.tableWithColumns;
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get catalogResource() {
        return this.getBooleanAttribute('catalog_resource');
    }
    set catalogResource(value) {
        this._catalogResource = value;
    }
    resetCatalogResource() {
        this._catalogResource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogResourceInput() {
        return this._catalogResource;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get permissions() {
        return this.getListAttribute('permissions');
    }
    set permissions(value) {
        this._permissions = value;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions;
    }
    get permissionsWithGrantOption() {
        return this.getListAttribute('permissions_with_grant_option');
    }
    set permissionsWithGrantOption(value) {
        this._permissionsWithGrantOption = value;
    }
    resetPermissionsWithGrantOption() {
        this._permissionsWithGrantOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsWithGrantOptionInput() {
        return this._permissionsWithGrantOption;
    }
    get principal() {
        return this.getStringAttribute('principal');
    }
    set principal(value) {
        this._principal = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal;
    }
    get dataLocation() {
        return this.interpolationForAttribute('data_location');
    }
    set dataLocation(value) {
        this._dataLocation = value;
    }
    resetDataLocation() {
        this._dataLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataLocationInput() {
        return this._dataLocation;
    }
    get database() {
        return this.interpolationForAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    resetDatabase() {
        this._database = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get table() {
        return this.interpolationForAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    resetTable() {
        this._table = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get tableWithColumns() {
        return this.interpolationForAttribute('table_with_columns');
    }
    set tableWithColumns(value) {
        this._tableWithColumns = value;
    }
    resetTableWithColumns() {
        this._tableWithColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableWithColumnsInput() {
        return this._tableWithColumns;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            catalog_id: cdktf.stringToTerraform(this._catalogId),
            catalog_resource: cdktf.booleanToTerraform(this._catalogResource),
            permissions: cdktf.listMapper(cdktf.stringToTerraform)(this._permissions),
            permissions_with_grant_option: cdktf.listMapper(cdktf.stringToTerraform)(this._permissionsWithGrantOption),
            principal: cdktf.stringToTerraform(this._principal),
            data_location: cdktf.listMapper(lakeformationPermissionsDataLocationToTerraform)(this._dataLocation),
            database: cdktf.listMapper(lakeformationPermissionsDatabaseToTerraform)(this._database),
            table: cdktf.listMapper(lakeformationPermissionsTableToTerraform)(this._table),
            table_with_columns: cdktf.listMapper(lakeformationPermissionsTableWithColumnsToTerraform)(this._tableWithColumns),
        };
    }
}
exports.LakeformationPermissions = LakeformationPermissions;
_a = JSII_RTTI_SYMBOL_1;
LakeformationPermissions[_a] = { fqn: "hashicorp_aws.LakeformationPermissions", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,