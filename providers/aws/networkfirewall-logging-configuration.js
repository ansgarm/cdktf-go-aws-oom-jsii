"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallLoggingConfiguration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_destination: cdktf.hashMapper(cdktf.anyToTerraform)(struct.logDestination),
        log_destination_type: cdktf.stringToTerraform(struct.logDestinationType),
        log_type: cdktf.stringToTerraform(struct.logType),
    };
}
function networkfirewallLoggingConfigurationLoggingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        log_destination_config: cdktf.listMapper(networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform)(struct.logDestinationConfig),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/networkfirewall_logging_configuration.html aws_networkfirewall_logging_configuration}.
 */
class NetworkfirewallLoggingConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/networkfirewall_logging_configuration.html aws_networkfirewall_logging_configuration} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_networkfirewall_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._firewallArn = config.firewallArn;
        this._loggingConfiguration = config.loggingConfiguration;
    }
    get firewallArn() {
        return this.getStringAttribute('firewall_arn');
    }
    set firewallArn(value) {
        this._firewallArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallArnInput() {
        return this._firewallArn;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loggingConfiguration() {
        return this.interpolationForAttribute('logging_configuration');
    }
    set loggingConfiguration(value) {
        this._loggingConfiguration = value;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigurationInput() {
        return this._loggingConfiguration;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            firewall_arn: cdktf.stringToTerraform(this._firewallArn),
            logging_configuration: cdktf.listMapper(networkfirewallLoggingConfigurationLoggingConfigurationToTerraform)(this._loggingConfiguration),
        };
    }
}
exports.NetworkfirewallLoggingConfiguration = NetworkfirewallLoggingConfiguration;
_a = JSII_RTTI_SYMBOL_1;
NetworkfirewallLoggingConfiguration[_a] = { fqn: "hashicorp_aws.NetworkfirewallLoggingConfiguration", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,