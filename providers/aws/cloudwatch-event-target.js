"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudwatchEventTarget = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudwatchEventTargetBatchTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        array_size: cdktf.numberToTerraform(struct.arraySize),
        job_attempts: cdktf.numberToTerraform(struct.jobAttempts),
        job_definition: cdktf.stringToTerraform(struct.jobDefinition),
        job_name: cdktf.stringToTerraform(struct.jobName),
    };
}
function cloudwatchEventTargetDeadLetterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
function cloudwatchEventTargetEcsTargetNetworkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        assign_public_ip: cdktf.booleanToTerraform(struct.assignPublicIp),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
        subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.subnets),
    };
}
function cloudwatchEventTargetEcsTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        group: cdktf.stringToTerraform(struct.group),
        launch_type: cdktf.stringToTerraform(struct.launchType),
        platform_version: cdktf.stringToTerraform(struct.platformVersion),
        task_count: cdktf.numberToTerraform(struct.taskCount),
        task_definition_arn: cdktf.stringToTerraform(struct.taskDefinitionArn),
        network_configuration: cdktf.listMapper(cloudwatchEventTargetEcsTargetNetworkConfigurationToTerraform)(struct.networkConfiguration),
    };
}
function cloudwatchEventTargetHttpTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        header_parameters: cdktf.hashMapper(cdktf.anyToTerraform)(struct.headerParameters),
        path_parameter_values: cdktf.listMapper(cdktf.stringToTerraform)(struct.pathParameterValues),
        query_string_parameters: cdktf.hashMapper(cdktf.anyToTerraform)(struct.queryStringParameters),
    };
}
function cloudwatchEventTargetInputTransformerToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        input_paths: cdktf.hashMapper(cdktf.anyToTerraform)(struct.inputPaths),
        input_template: cdktf.stringToTerraform(struct.inputTemplate),
    };
}
function cloudwatchEventTargetKinesisTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        partition_key_path: cdktf.stringToTerraform(struct.partitionKeyPath),
    };
}
function cloudwatchEventTargetRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        maximum_event_age_in_seconds: cdktf.numberToTerraform(struct.maximumEventAgeInSeconds),
        maximum_retry_attempts: cdktf.numberToTerraform(struct.maximumRetryAttempts),
    };
}
function cloudwatchEventTargetRunCommandTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
function cloudwatchEventTargetSqsTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        message_group_id: cdktf.stringToTerraform(struct.messageGroupId),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_target.html aws_cloudwatch_event_target}.
 */
class CloudwatchEventTarget extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_target.html aws_cloudwatch_event_target} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cloudwatch_event_target',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._arn = config.arn;
        this._eventBusName = config.eventBusName;
        this._input = config.input;
        this._inputPath = config.inputPath;
        this._roleArn = config.roleArn;
        this._rule = config.rule;
        this._targetId = config.targetId;
        this._batchTarget = config.batchTarget;
        this._deadLetterConfig = config.deadLetterConfig;
        this._ecsTarget = config.ecsTarget;
        this._httpTarget = config.httpTarget;
        this._inputTransformer = config.inputTransformer;
        this._kinesisTarget = config.kinesisTarget;
        this._retryPolicy = config.retryPolicy;
        this._runCommandTargets = config.runCommandTargets;
        this._sqsTarget = config.sqsTarget;
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
    get eventBusName() {
        return this.getStringAttribute('event_bus_name');
    }
    set eventBusName(value) {
        this._eventBusName = value;
    }
    resetEventBusName() {
        this._eventBusName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventBusNameInput() {
        return this._eventBusName;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get input() {
        return this.getStringAttribute('input');
    }
    set input(value) {
        this._input = value;
    }
    resetInput() {
        this._input = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputInput() {
        return this._input;
    }
    get inputPath() {
        return this.getStringAttribute('input_path');
    }
    set inputPath(value) {
        this._inputPath = value;
    }
    resetInputPath() {
        this._inputPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputPathInput() {
        return this._inputPath;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get rule() {
        return this.getStringAttribute('rule');
    }
    set rule(value) {
        this._rule = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleInput() {
        return this._rule;
    }
    get targetId() {
        return this.getStringAttribute('target_id');
    }
    set targetId(value) {
        this._targetId = value;
    }
    resetTargetId() {
        this._targetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetIdInput() {
        return this._targetId;
    }
    get batchTarget() {
        return this.interpolationForAttribute('batch_target');
    }
    set batchTarget(value) {
        this._batchTarget = value;
    }
    resetBatchTarget() {
        this._batchTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchTargetInput() {
        return this._batchTarget;
    }
    get deadLetterConfig() {
        return this.interpolationForAttribute('dead_letter_config');
    }
    set deadLetterConfig(value) {
        this._deadLetterConfig = value;
    }
    resetDeadLetterConfig() {
        this._deadLetterConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deadLetterConfigInput() {
        return this._deadLetterConfig;
    }
    get ecsTarget() {
        return this.interpolationForAttribute('ecs_target');
    }
    set ecsTarget(value) {
        this._ecsTarget = value;
    }
    resetEcsTarget() {
        this._ecsTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecsTargetInput() {
        return this._ecsTarget;
    }
    get httpTarget() {
        return this.interpolationForAttribute('http_target');
    }
    set httpTarget(value) {
        this._httpTarget = value;
    }
    resetHttpTarget() {
        this._httpTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTargetInput() {
        return this._httpTarget;
    }
    get inputTransformer() {
        return this.interpolationForAttribute('input_transformer');
    }
    set inputTransformer(value) {
        this._inputTransformer = value;
    }
    resetInputTransformer() {
        this._inputTransformer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputTransformerInput() {
        return this._inputTransformer;
    }
    get kinesisTarget() {
        return this.interpolationForAttribute('kinesis_target');
    }
    set kinesisTarget(value) {
        this._kinesisTarget = value;
    }
    resetKinesisTarget() {
        this._kinesisTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisTargetInput() {
        return this._kinesisTarget;
    }
    get retryPolicy() {
        return this.interpolationForAttribute('retry_policy');
    }
    set retryPolicy(value) {
        this._retryPolicy = value;
    }
    resetRetryPolicy() {
        this._retryPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy;
    }
    get runCommandTargets() {
        return this.interpolationForAttribute('run_command_targets');
    }
    set runCommandTargets(value) {
        this._runCommandTargets = value;
    }
    resetRunCommandTargets() {
        this._runCommandTargets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runCommandTargetsInput() {
        return this._runCommandTargets;
    }
    get sqsTarget() {
        return this.interpolationForAttribute('sqs_target');
    }
    set sqsTarget(value) {
        this._sqsTarget = value;
    }
    resetSqsTarget() {
        this._sqsTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqsTargetInput() {
        return this._sqsTarget;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            arn: cdktf.stringToTerraform(this._arn),
            event_bus_name: cdktf.stringToTerraform(this._eventBusName),
            input: cdktf.stringToTerraform(this._input),
            input_path: cdktf.stringToTerraform(this._inputPath),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            rule: cdktf.stringToTerraform(this._rule),
            target_id: cdktf.stringToTerraform(this._targetId),
            batch_target: cdktf.listMapper(cloudwatchEventTargetBatchTargetToTerraform)(this._batchTarget),
            dead_letter_config: cdktf.listMapper(cloudwatchEventTargetDeadLetterConfigToTerraform)(this._deadLetterConfig),
            ecs_target: cdktf.listMapper(cloudwatchEventTargetEcsTargetToTerraform)(this._ecsTarget),
            http_target: cdktf.listMapper(cloudwatchEventTargetHttpTargetToTerraform)(this._httpTarget),
            input_transformer: cdktf.listMapper(cloudwatchEventTargetInputTransformerToTerraform)(this._inputTransformer),
            kinesis_target: cdktf.listMapper(cloudwatchEventTargetKinesisTargetToTerraform)(this._kinesisTarget),
            retry_policy: cdktf.listMapper(cloudwatchEventTargetRetryPolicyToTerraform)(this._retryPolicy),
            run_command_targets: cdktf.listMapper(cloudwatchEventTargetRunCommandTargetsToTerraform)(this._runCommandTargets),
            sqs_target: cdktf.listMapper(cloudwatchEventTargetSqsTargetToTerraform)(this._sqsTarget),
        };
    }
}
exports.CloudwatchEventTarget = CloudwatchEventTarget;
_a = JSII_RTTI_SYMBOL_1;
CloudwatchEventTarget[_a] = { fqn: "hashicorp_aws.CloudwatchEventTarget", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,