"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsIdentitystoreUser = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsIdentitystoreUserFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        attribute_path: cdktf.stringToTerraform(struct.attributePath),
        attribute_value: cdktf.stringToTerraform(struct.attributeValue),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/identitystore_user.html aws_identitystore_user}.
 */
class DataAwsIdentitystoreUser extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/identitystore_user.html aws_identitystore_user} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_identitystore_user',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._identityStoreId = config.identityStoreId;
        this._userId = config.userId;
        this._filter = config.filter;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get identityStoreId() {
        return this.getStringAttribute('identity_store_id');
    }
    set identityStoreId(value) {
        this._identityStoreId = value;
    }
    // Temporarily expose input value. Use with caution.
    get identityStoreIdInput() {
        return this._identityStoreId;
    }
    get userId() {
        return this.getStringAttribute('user_id');
    }
    set userId(value) {
        this._userId = value;
    }
    resetUserId() {
        this._userId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userIdInput() {
        return this._userId;
    }
    // user_name - computed: true, optional: false, required: false
    get userName() {
        return this.getStringAttribute('user_name');
    }
    get filter() {
        return this.interpolationForAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            identity_store_id: cdktf.stringToTerraform(this._identityStoreId),
            user_id: cdktf.stringToTerraform(this._userId),
            filter: cdktf.listMapper(dataAwsIdentitystoreUserFilterToTerraform)(this._filter),
        };
    }
}
exports.DataAwsIdentitystoreUser = DataAwsIdentitystoreUser;
_a = JSII_RTTI_SYMBOL_1;
DataAwsIdentitystoreUser[_a] = { fqn: "hashicorp_aws.DataAwsIdentitystoreUser", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,