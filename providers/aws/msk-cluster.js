"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MskCluster = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function mskClusterBrokerNodeGroupInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        az_distribution: cdktf.stringToTerraform(struct.azDistribution),
        client_subnets: cdktf.listMapper(cdktf.stringToTerraform)(struct.clientSubnets),
        ebs_volume_size: cdktf.numberToTerraform(struct.ebsVolumeSize),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.securityGroups),
    };
}
function mskClusterClientAuthenticationSaslToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        scram: cdktf.booleanToTerraform(struct.scram),
    };
}
function mskClusterClientAuthenticationTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        certificate_authority_arns: cdktf.listMapper(cdktf.stringToTerraform)(struct.certificateAuthorityArns),
    };
}
function mskClusterClientAuthenticationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        sasl: cdktf.listMapper(mskClusterClientAuthenticationSaslToTerraform)(struct.sasl),
        tls: cdktf.listMapper(mskClusterClientAuthenticationTlsToTerraform)(struct.tls),
    };
}
function mskClusterConfigurationInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        revision: cdktf.numberToTerraform(struct.revision),
    };
}
function mskClusterEncryptionInfoEncryptionInTransitToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        client_broker: cdktf.stringToTerraform(struct.clientBroker),
        in_cluster: cdktf.booleanToTerraform(struct.inCluster),
    };
}
function mskClusterEncryptionInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        encryption_at_rest_kms_key_arn: cdktf.stringToTerraform(struct.encryptionAtRestKmsKeyArn),
        encryption_in_transit: cdktf.listMapper(mskClusterEncryptionInfoEncryptionInTransitToTerraform)(struct.encryptionInTransit),
    };
}
function mskClusterLoggingInfoBrokerLogsCloudwatchLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group: cdktf.stringToTerraform(struct.logGroup),
    };
}
function mskClusterLoggingInfoBrokerLogsFirehoseToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delivery_stream: cdktf.stringToTerraform(struct.deliveryStream),
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
function mskClusterLoggingInfoBrokerLogsS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        enabled: cdktf.booleanToTerraform(struct.enabled),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
function mskClusterLoggingInfoBrokerLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        cloudwatch_logs: cdktf.listMapper(mskClusterLoggingInfoBrokerLogsCloudwatchLogsToTerraform)(struct.cloudwatchLogs),
        firehose: cdktf.listMapper(mskClusterLoggingInfoBrokerLogsFirehoseToTerraform)(struct.firehose),
        s3: cdktf.listMapper(mskClusterLoggingInfoBrokerLogsS3ToTerraform)(struct.s3),
    };
}
function mskClusterLoggingInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        broker_logs: cdktf.listMapper(mskClusterLoggingInfoBrokerLogsToTerraform)(struct.brokerLogs),
    };
}
function mskClusterOpenMonitoringPrometheusJmxExporterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled_in_broker: cdktf.booleanToTerraform(struct.enabledInBroker),
    };
}
function mskClusterOpenMonitoringPrometheusNodeExporterToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        enabled_in_broker: cdktf.booleanToTerraform(struct.enabledInBroker),
    };
}
function mskClusterOpenMonitoringPrometheusToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        jmx_exporter: cdktf.listMapper(mskClusterOpenMonitoringPrometheusJmxExporterToTerraform)(struct.jmxExporter),
        node_exporter: cdktf.listMapper(mskClusterOpenMonitoringPrometheusNodeExporterToTerraform)(struct.nodeExporter),
    };
}
function mskClusterOpenMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        prometheus: cdktf.listMapper(mskClusterOpenMonitoringPrometheusToTerraform)(struct.prometheus),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/msk_cluster.html aws_msk_cluster}.
 */
class MskCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/msk_cluster.html aws_msk_cluster} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_msk_cluster',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._clusterName = config.clusterName;
        this._enhancedMonitoring = config.enhancedMonitoring;
        this._kafkaVersion = config.kafkaVersion;
        this._numberOfBrokerNodes = config.numberOfBrokerNodes;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._brokerNodeGroupInfo = config.brokerNodeGroupInfo;
        this._clientAuthentication = config.clientAuthentication;
        this._configurationInfo = config.configurationInfo;
        this._encryptionInfo = config.encryptionInfo;
        this._loggingInfo = config.loggingInfo;
        this._openMonitoring = config.openMonitoring;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // bootstrap_brokers - computed: true, optional: false, required: false
    get bootstrapBrokers() {
        return this.getStringAttribute('bootstrap_brokers');
    }
    // bootstrap_brokers_sasl_scram - computed: true, optional: false, required: false
    get bootstrapBrokersSaslScram() {
        return this.getStringAttribute('bootstrap_brokers_sasl_scram');
    }
    // bootstrap_brokers_tls - computed: true, optional: false, required: false
    get bootstrapBrokersTls() {
        return this.getStringAttribute('bootstrap_brokers_tls');
    }
    get clusterName() {
        return this.getStringAttribute('cluster_name');
    }
    set clusterName(value) {
        this._clusterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterNameInput() {
        return this._clusterName;
    }
    // current_version - computed: true, optional: false, required: false
    get currentVersion() {
        return this.getStringAttribute('current_version');
    }
    get enhancedMonitoring() {
        return this.getStringAttribute('enhanced_monitoring');
    }
    set enhancedMonitoring(value) {
        this._enhancedMonitoring = value;
    }
    resetEnhancedMonitoring() {
        this._enhancedMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enhancedMonitoringInput() {
        return this._enhancedMonitoring;
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get kafkaVersion() {
        return this.getStringAttribute('kafka_version');
    }
    set kafkaVersion(value) {
        this._kafkaVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get kafkaVersionInput() {
        return this._kafkaVersion;
    }
    get numberOfBrokerNodes() {
        return this.getNumberAttribute('number_of_broker_nodes');
    }
    set numberOfBrokerNodes(value) {
        this._numberOfBrokerNodes = value;
    }
    // Temporarily expose input value. Use with caution.
    get numberOfBrokerNodesInput() {
        return this._numberOfBrokerNodes;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // zookeeper_connect_string - computed: true, optional: false, required: false
    get zookeeperConnectString() {
        return this.getStringAttribute('zookeeper_connect_string');
    }
    get brokerNodeGroupInfo() {
        return this.interpolationForAttribute('broker_node_group_info');
    }
    set brokerNodeGroupInfo(value) {
        this._brokerNodeGroupInfo = value;
    }
    // Temporarily expose input value. Use with caution.
    get brokerNodeGroupInfoInput() {
        return this._brokerNodeGroupInfo;
    }
    get clientAuthentication() {
        return this.interpolationForAttribute('client_authentication');
    }
    set clientAuthentication(value) {
        this._clientAuthentication = value;
    }
    resetClientAuthentication() {
        this._clientAuthentication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAuthenticationInput() {
        return this._clientAuthentication;
    }
    get configurationInfo() {
        return this.interpolationForAttribute('configuration_info');
    }
    set configurationInfo(value) {
        this._configurationInfo = value;
    }
    resetConfigurationInfo() {
        this._configurationInfo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInfoInput() {
        return this._configurationInfo;
    }
    get encryptionInfo() {
        return this.interpolationForAttribute('encryption_info');
    }
    set encryptionInfo(value) {
        this._encryptionInfo = value;
    }
    resetEncryptionInfo() {
        this._encryptionInfo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionInfoInput() {
        return this._encryptionInfo;
    }
    get loggingInfo() {
        return this.interpolationForAttribute('logging_info');
    }
    set loggingInfo(value) {
        this._loggingInfo = value;
    }
    resetLoggingInfo() {
        this._loggingInfo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingInfoInput() {
        return this._loggingInfo;
    }
    get openMonitoring() {
        return this.interpolationForAttribute('open_monitoring');
    }
    set openMonitoring(value) {
        this._openMonitoring = value;
    }
    resetOpenMonitoring() {
        this._openMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openMonitoringInput() {
        return this._openMonitoring;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_name: cdktf.stringToTerraform(this._clusterName),
            enhanced_monitoring: cdktf.stringToTerraform(this._enhancedMonitoring),
            kafka_version: cdktf.stringToTerraform(this._kafkaVersion),
            number_of_broker_nodes: cdktf.numberToTerraform(this._numberOfBrokerNodes),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            broker_node_group_info: cdktf.listMapper(mskClusterBrokerNodeGroupInfoToTerraform)(this._brokerNodeGroupInfo),
            client_authentication: cdktf.listMapper(mskClusterClientAuthenticationToTerraform)(this._clientAuthentication),
            configuration_info: cdktf.listMapper(mskClusterConfigurationInfoToTerraform)(this._configurationInfo),
            encryption_info: cdktf.listMapper(mskClusterEncryptionInfoToTerraform)(this._encryptionInfo),
            logging_info: cdktf.listMapper(mskClusterLoggingInfoToTerraform)(this._loggingInfo),
            open_monitoring: cdktf.listMapper(mskClusterOpenMonitoringToTerraform)(this._openMonitoring),
        };
    }
}
exports.MskCluster = MskCluster;
_a = JSII_RTTI_SYMBOL_1;
MskCluster[_a] = { fqn: "hashicorp_aws.MskCluster", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,