"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cloudtrail = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudtrailEventSelectorDataResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
    };
}
function cloudtrailEventSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        include_management_events: cdktf.booleanToTerraform(struct.includeManagementEvents),
        read_write_type: cdktf.stringToTerraform(struct.readWriteType),
        data_resource: cdktf.listMapper(cloudtrailEventSelectorDataResourceToTerraform)(struct.dataResource),
    };
}
function cloudtrailInsightSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        insight_type: cdktf.stringToTerraform(struct.insightType),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/cloudtrail.html aws_cloudtrail}.
 */
class Cloudtrail extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cloudtrail.html aws_cloudtrail} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cloudtrail',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._cloudWatchLogsGroupArn = config.cloudWatchLogsGroupArn;
        this._cloudWatchLogsRoleArn = config.cloudWatchLogsRoleArn;
        this._enableLogFileValidation = config.enableLogFileValidation;
        this._enableLogging = config.enableLogging;
        this._includeGlobalServiceEvents = config.includeGlobalServiceEvents;
        this._isMultiRegionTrail = config.isMultiRegionTrail;
        this._isOrganizationTrail = config.isOrganizationTrail;
        this._kmsKeyId = config.kmsKeyId;
        this._name = config.name;
        this._s3BucketName = config.s3BucketName;
        this._s3KeyPrefix = config.s3KeyPrefix;
        this._snsTopicName = config.snsTopicName;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._eventSelector = config.eventSelector;
        this._insightSelector = config.insightSelector;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get cloudWatchLogsGroupArn() {
        return this.getStringAttribute('cloud_watch_logs_group_arn');
    }
    set cloudWatchLogsGroupArn(value) {
        this._cloudWatchLogsGroupArn = value;
    }
    resetCloudWatchLogsGroupArn() {
        this._cloudWatchLogsGroupArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudWatchLogsGroupArnInput() {
        return this._cloudWatchLogsGroupArn;
    }
    get cloudWatchLogsRoleArn() {
        return this.getStringAttribute('cloud_watch_logs_role_arn');
    }
    set cloudWatchLogsRoleArn(value) {
        this._cloudWatchLogsRoleArn = value;
    }
    resetCloudWatchLogsRoleArn() {
        this._cloudWatchLogsRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudWatchLogsRoleArnInput() {
        return this._cloudWatchLogsRoleArn;
    }
    get enableLogFileValidation() {
        return this.getBooleanAttribute('enable_log_file_validation');
    }
    set enableLogFileValidation(value) {
        this._enableLogFileValidation = value;
    }
    resetEnableLogFileValidation() {
        this._enableLogFileValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableLogFileValidationInput() {
        return this._enableLogFileValidation;
    }
    get enableLogging() {
        return this.getBooleanAttribute('enable_logging');
    }
    set enableLogging(value) {
        this._enableLogging = value;
    }
    resetEnableLogging() {
        this._enableLogging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableLoggingInput() {
        return this._enableLogging;
    }
    // home_region - computed: true, optional: false, required: false
    get homeRegion() {
        return this.getStringAttribute('home_region');
    }
    // id - computed: true, optional: true, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get includeGlobalServiceEvents() {
        return this.getBooleanAttribute('include_global_service_events');
    }
    set includeGlobalServiceEvents(value) {
        this._includeGlobalServiceEvents = value;
    }
    resetIncludeGlobalServiceEvents() {
        this._includeGlobalServiceEvents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeGlobalServiceEventsInput() {
        return this._includeGlobalServiceEvents;
    }
    get isMultiRegionTrail() {
        return this.getBooleanAttribute('is_multi_region_trail');
    }
    set isMultiRegionTrail(value) {
        this._isMultiRegionTrail = value;
    }
    resetIsMultiRegionTrail() {
        this._isMultiRegionTrail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isMultiRegionTrailInput() {
        return this._isMultiRegionTrail;
    }
    get isOrganizationTrail() {
        return this.getBooleanAttribute('is_organization_trail');
    }
    set isOrganizationTrail(value) {
        this._isOrganizationTrail = value;
    }
    resetIsOrganizationTrail() {
        this._isOrganizationTrail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isOrganizationTrailInput() {
        return this._isOrganizationTrail;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    set s3BucketName(value) {
        this._s3BucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketNameInput() {
        return this._s3BucketName;
    }
    get s3KeyPrefix() {
        return this.getStringAttribute('s3_key_prefix');
    }
    set s3KeyPrefix(value) {
        this._s3KeyPrefix = value;
    }
    resetS3KeyPrefix() {
        this._s3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyPrefixInput() {
        return this._s3KeyPrefix;
    }
    get snsTopicName() {
        return this.getStringAttribute('sns_topic_name');
    }
    set snsTopicName(value) {
        this._snsTopicName = value;
    }
    resetSnsTopicName() {
        this._snsTopicName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snsTopicNameInput() {
        return this._snsTopicName;
    }
    get tags() {
        return this.interpolationForAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.interpolationForAttribute('tags_all'); // Getting the computed value is not yet implemented
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get eventSelector() {
        return this.interpolationForAttribute('event_selector');
    }
    set eventSelector(value) {
        this._eventSelector = value;
    }
    resetEventSelector() {
        this._eventSelector = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventSelectorInput() {
        return this._eventSelector;
    }
    get insightSelector() {
        return this.interpolationForAttribute('insight_selector');
    }
    set insightSelector(value) {
        this._insightSelector = value;
    }
    resetInsightSelector() {
        this._insightSelector = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insightSelectorInput() {
        return this._insightSelector;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cloud_watch_logs_group_arn: cdktf.stringToTerraform(this._cloudWatchLogsGroupArn),
            cloud_watch_logs_role_arn: cdktf.stringToTerraform(this._cloudWatchLogsRoleArn),
            enable_log_file_validation: cdktf.booleanToTerraform(this._enableLogFileValidation),
            enable_logging: cdktf.booleanToTerraform(this._enableLogging),
            include_global_service_events: cdktf.booleanToTerraform(this._includeGlobalServiceEvents),
            is_multi_region_trail: cdktf.booleanToTerraform(this._isMultiRegionTrail),
            is_organization_trail: cdktf.booleanToTerraform(this._isOrganizationTrail),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            name: cdktf.stringToTerraform(this._name),
            s3_bucket_name: cdktf.stringToTerraform(this._s3BucketName),
            s3_key_prefix: cdktf.stringToTerraform(this._s3KeyPrefix),
            sns_topic_name: cdktf.stringToTerraform(this._snsTopicName),
            tags: cdktf.hashMapper(cdktf.anyToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.anyToTerraform)(this._tagsAll),
            event_selector: cdktf.listMapper(cloudtrailEventSelectorToTerraform)(this._eventSelector),
            insight_selector: cdktf.listMapper(cloudtrailInsightSelectorToTerraform)(this._insightSelector),
        };
    }
}
exports.Cloudtrail = Cloudtrail;
_a = JSII_RTTI_SYMBOL_1;
Cloudtrail[_a] = { fqn: "hashicorp_aws.Cloudtrail", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,